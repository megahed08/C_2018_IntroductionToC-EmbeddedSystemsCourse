
keypad_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002574  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00002574  000025e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001a94  00000000  00000000  00002600  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ad6  00000000  00000000  00004094  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00004b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00004caa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00004e1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00006a63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000794e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  000086fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000885c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00008ae9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000092b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e7       	ldi	r30, 0x74	; 116
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <main>
      7a:	0c 94 b8 12 	jmp	0x2570	; 0x2570 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 3c 12 	jmp	0x2478	; 0x2478 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 58 12 	jmp	0x24b0	; 0x24b0 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 48 12 	jmp	0x2490	; 0x2490 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 64 12 	jmp	0x24c8	; 0x24c8 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 48 12 	jmp	0x2490	; 0x2490 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 64 12 	jmp	0x24c8	; 0x24c8 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 3c 12 	jmp	0x2478	; 0x2478 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 58 12 	jmp	0x24b0	; 0x24b0 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 48 12 	jmp	0x2490	; 0x2490 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 64 12 	jmp	0x24c8	; 0x24c8 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 48 12 	jmp	0x2490	; 0x2490 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 64 12 	jmp	0x24c8	; 0x24c8 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 48 12 	jmp	0x2490	; 0x2490 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 64 12 	jmp	0x24c8	; 0x24c8 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 4c 12 	jmp	0x2498	; 0x2498 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 68 12 	jmp	0x24d0	; 0x24d0 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <DIO_vSETPinDirection>:
#include "Dio_Int.h"
#include "Bit_Min.h"


void DIO_vSETPinDirection(u8 PortNumber,u8 PinNumber, u8 Direction)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <DIO_vSETPinDirection+0x6>
     b3c:	00 d0       	rcall	.+0      	; 0xb3e <DIO_vSETPinDirection+0x8>
     b3e:	0f 92       	push	r0
     b40:	cd b7       	in	r28, 0x3d	; 61
     b42:	de b7       	in	r29, 0x3e	; 62
     b44:	89 83       	std	Y+1, r24	; 0x01
     b46:	6a 83       	std	Y+2, r22	; 0x02
     b48:	4b 83       	std	Y+3, r20	; 0x03
	switch (PortNumber)
     b4a:	89 81       	ldd	r24, Y+1	; 0x01
     b4c:	28 2f       	mov	r18, r24
     b4e:	30 e0       	ldi	r19, 0x00	; 0
     b50:	3d 83       	std	Y+5, r19	; 0x05
     b52:	2c 83       	std	Y+4, r18	; 0x04
     b54:	8c 81       	ldd	r24, Y+4	; 0x04
     b56:	9d 81       	ldd	r25, Y+5	; 0x05
     b58:	81 30       	cpi	r24, 0x01	; 1
     b5a:	91 05       	cpc	r25, r1
     b5c:	09 f4       	brne	.+2      	; 0xb60 <DIO_vSETPinDirection+0x2a>
     b5e:	43 c0       	rjmp	.+134    	; 0xbe6 <DIO_vSETPinDirection+0xb0>
     b60:	2c 81       	ldd	r18, Y+4	; 0x04
     b62:	3d 81       	ldd	r19, Y+5	; 0x05
     b64:	22 30       	cpi	r18, 0x02	; 2
     b66:	31 05       	cpc	r19, r1
     b68:	2c f4       	brge	.+10     	; 0xb74 <DIO_vSETPinDirection+0x3e>
     b6a:	8c 81       	ldd	r24, Y+4	; 0x04
     b6c:	9d 81       	ldd	r25, Y+5	; 0x05
     b6e:	00 97       	sbiw	r24, 0x00	; 0
     b70:	71 f0       	breq	.+28     	; 0xb8e <DIO_vSETPinDirection+0x58>
     b72:	bc c0       	rjmp	.+376    	; 0xcec <DIO_vSETPinDirection+0x1b6>
     b74:	2c 81       	ldd	r18, Y+4	; 0x04
     b76:	3d 81       	ldd	r19, Y+5	; 0x05
     b78:	22 30       	cpi	r18, 0x02	; 2
     b7a:	31 05       	cpc	r19, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <DIO_vSETPinDirection+0x4a>
     b7e:	5f c0       	rjmp	.+190    	; 0xc3e <DIO_vSETPinDirection+0x108>
     b80:	8c 81       	ldd	r24, Y+4	; 0x04
     b82:	9d 81       	ldd	r25, Y+5	; 0x05
     b84:	83 30       	cpi	r24, 0x03	; 3
     b86:	91 05       	cpc	r25, r1
     b88:	09 f4       	brne	.+2      	; 0xb8c <DIO_vSETPinDirection+0x56>
     b8a:	85 c0       	rjmp	.+266    	; 0xc96 <DIO_vSETPinDirection+0x160>
     b8c:	af c0       	rjmp	.+350    	; 0xcec <DIO_vSETPinDirection+0x1b6>
	{
	case DIO_PORTA :
		if (Direction == DIO_OUTPUT)
     b8e:	8b 81       	ldd	r24, Y+3	; 0x03
     b90:	81 30       	cpi	r24, 0x01	; 1
     b92:	a1 f4       	brne	.+40     	; 0xbbc <DIO_vSETPinDirection+0x86>
			Set_Bit(DDRA,PinNumber);
     b94:	aa e3       	ldi	r26, 0x3A	; 58
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	ea e3       	ldi	r30, 0x3A	; 58
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	48 2f       	mov	r20, r24
     ba0:	8a 81       	ldd	r24, Y+2	; 0x02
     ba2:	28 2f       	mov	r18, r24
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	02 2e       	mov	r0, r18
     bac:	02 c0       	rjmp	.+4      	; 0xbb2 <DIO_vSETPinDirection+0x7c>
     bae:	88 0f       	add	r24, r24
     bb0:	99 1f       	adc	r25, r25
     bb2:	0a 94       	dec	r0
     bb4:	e2 f7       	brpl	.-8      	; 0xbae <DIO_vSETPinDirection+0x78>
     bb6:	84 2b       	or	r24, r20
     bb8:	8c 93       	st	X, r24
     bba:	98 c0       	rjmp	.+304    	; 0xcec <DIO_vSETPinDirection+0x1b6>
		else
			Clr_Bit(DDRA,PinNumber);
     bbc:	aa e3       	ldi	r26, 0x3A	; 58
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	ea e3       	ldi	r30, 0x3A	; 58
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	80 81       	ld	r24, Z
     bc6:	48 2f       	mov	r20, r24
     bc8:	8a 81       	ldd	r24, Y+2	; 0x02
     bca:	28 2f       	mov	r18, r24
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	02 2e       	mov	r0, r18
     bd4:	02 c0       	rjmp	.+4      	; 0xbda <DIO_vSETPinDirection+0xa4>
     bd6:	88 0f       	add	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	0a 94       	dec	r0
     bdc:	e2 f7       	brpl	.-8      	; 0xbd6 <DIO_vSETPinDirection+0xa0>
     bde:	80 95       	com	r24
     be0:	84 23       	and	r24, r20
     be2:	8c 93       	st	X, r24
     be4:	83 c0       	rjmp	.+262    	; 0xcec <DIO_vSETPinDirection+0x1b6>
		break;
	case DIO_PORTB :
		if (Direction == DIO_OUTPUT)
     be6:	8b 81       	ldd	r24, Y+3	; 0x03
     be8:	81 30       	cpi	r24, 0x01	; 1
     bea:	a1 f4       	brne	.+40     	; 0xc14 <DIO_vSETPinDirection+0xde>
			Set_Bit(DDRB,PinNumber);
     bec:	a7 e3       	ldi	r26, 0x37	; 55
     bee:	b0 e0       	ldi	r27, 0x00	; 0
     bf0:	e7 e3       	ldi	r30, 0x37	; 55
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	80 81       	ld	r24, Z
     bf6:	48 2f       	mov	r20, r24
     bf8:	8a 81       	ldd	r24, Y+2	; 0x02
     bfa:	28 2f       	mov	r18, r24
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	02 2e       	mov	r0, r18
     c04:	02 c0       	rjmp	.+4      	; 0xc0a <DIO_vSETPinDirection+0xd4>
     c06:	88 0f       	add	r24, r24
     c08:	99 1f       	adc	r25, r25
     c0a:	0a 94       	dec	r0
     c0c:	e2 f7       	brpl	.-8      	; 0xc06 <DIO_vSETPinDirection+0xd0>
     c0e:	84 2b       	or	r24, r20
     c10:	8c 93       	st	X, r24
     c12:	6c c0       	rjmp	.+216    	; 0xcec <DIO_vSETPinDirection+0x1b6>
		else
			Clr_Bit(DDRB,PinNumber);
     c14:	a7 e3       	ldi	r26, 0x37	; 55
     c16:	b0 e0       	ldi	r27, 0x00	; 0
     c18:	e7 e3       	ldi	r30, 0x37	; 55
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	80 81       	ld	r24, Z
     c1e:	48 2f       	mov	r20, r24
     c20:	8a 81       	ldd	r24, Y+2	; 0x02
     c22:	28 2f       	mov	r18, r24
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	02 2e       	mov	r0, r18
     c2c:	02 c0       	rjmp	.+4      	; 0xc32 <DIO_vSETPinDirection+0xfc>
     c2e:	88 0f       	add	r24, r24
     c30:	99 1f       	adc	r25, r25
     c32:	0a 94       	dec	r0
     c34:	e2 f7       	brpl	.-8      	; 0xc2e <DIO_vSETPinDirection+0xf8>
     c36:	80 95       	com	r24
     c38:	84 23       	and	r24, r20
     c3a:	8c 93       	st	X, r24
     c3c:	57 c0       	rjmp	.+174    	; 0xcec <DIO_vSETPinDirection+0x1b6>
		break;
	case DIO_PORTC :
		if (Direction ==DIO_OUTPUT)
     c3e:	8b 81       	ldd	r24, Y+3	; 0x03
     c40:	81 30       	cpi	r24, 0x01	; 1
     c42:	a1 f4       	brne	.+40     	; 0xc6c <DIO_vSETPinDirection+0x136>
			Set_Bit(DDRC,PinNumber);
     c44:	a4 e3       	ldi	r26, 0x34	; 52
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	e4 e3       	ldi	r30, 0x34	; 52
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	80 81       	ld	r24, Z
     c4e:	48 2f       	mov	r20, r24
     c50:	8a 81       	ldd	r24, Y+2	; 0x02
     c52:	28 2f       	mov	r18, r24
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	02 2e       	mov	r0, r18
     c5c:	02 c0       	rjmp	.+4      	; 0xc62 <DIO_vSETPinDirection+0x12c>
     c5e:	88 0f       	add	r24, r24
     c60:	99 1f       	adc	r25, r25
     c62:	0a 94       	dec	r0
     c64:	e2 f7       	brpl	.-8      	; 0xc5e <DIO_vSETPinDirection+0x128>
     c66:	84 2b       	or	r24, r20
     c68:	8c 93       	st	X, r24
     c6a:	40 c0       	rjmp	.+128    	; 0xcec <DIO_vSETPinDirection+0x1b6>
		else
			Clr_Bit(DDRC,PinNumber);
     c6c:	a4 e3       	ldi	r26, 0x34	; 52
     c6e:	b0 e0       	ldi	r27, 0x00	; 0
     c70:	e4 e3       	ldi	r30, 0x34	; 52
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	80 81       	ld	r24, Z
     c76:	48 2f       	mov	r20, r24
     c78:	8a 81       	ldd	r24, Y+2	; 0x02
     c7a:	28 2f       	mov	r18, r24
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	02 2e       	mov	r0, r18
     c84:	02 c0       	rjmp	.+4      	; 0xc8a <DIO_vSETPinDirection+0x154>
     c86:	88 0f       	add	r24, r24
     c88:	99 1f       	adc	r25, r25
     c8a:	0a 94       	dec	r0
     c8c:	e2 f7       	brpl	.-8      	; 0xc86 <DIO_vSETPinDirection+0x150>
     c8e:	80 95       	com	r24
     c90:	84 23       	and	r24, r20
     c92:	8c 93       	st	X, r24
     c94:	2b c0       	rjmp	.+86     	; 0xcec <DIO_vSETPinDirection+0x1b6>
		break;
	case DIO_PORTD :
		if (Direction ==DIO_OUTPUT)
     c96:	8b 81       	ldd	r24, Y+3	; 0x03
     c98:	81 30       	cpi	r24, 0x01	; 1
     c9a:	a1 f4       	brne	.+40     	; 0xcc4 <DIO_vSETPinDirection+0x18e>
			Set_Bit(DDRD,PinNumber);
     c9c:	a1 e3       	ldi	r26, 0x31	; 49
     c9e:	b0 e0       	ldi	r27, 0x00	; 0
     ca0:	e1 e3       	ldi	r30, 0x31	; 49
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	80 81       	ld	r24, Z
     ca6:	48 2f       	mov	r20, r24
     ca8:	8a 81       	ldd	r24, Y+2	; 0x02
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	02 2e       	mov	r0, r18
     cb4:	02 c0       	rjmp	.+4      	; 0xcba <DIO_vSETPinDirection+0x184>
     cb6:	88 0f       	add	r24, r24
     cb8:	99 1f       	adc	r25, r25
     cba:	0a 94       	dec	r0
     cbc:	e2 f7       	brpl	.-8      	; 0xcb6 <DIO_vSETPinDirection+0x180>
     cbe:	84 2b       	or	r24, r20
     cc0:	8c 93       	st	X, r24
     cc2:	14 c0       	rjmp	.+40     	; 0xcec <DIO_vSETPinDirection+0x1b6>
		else
			Clr_Bit(DDRD,PinNumber);
     cc4:	a1 e3       	ldi	r26, 0x31	; 49
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	e1 e3       	ldi	r30, 0x31	; 49
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	48 2f       	mov	r20, r24
     cd0:	8a 81       	ldd	r24, Y+2	; 0x02
     cd2:	28 2f       	mov	r18, r24
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	02 2e       	mov	r0, r18
     cdc:	02 c0       	rjmp	.+4      	; 0xce2 <DIO_vSETPinDirection+0x1ac>
     cde:	88 0f       	add	r24, r24
     ce0:	99 1f       	adc	r25, r25
     ce2:	0a 94       	dec	r0
     ce4:	e2 f7       	brpl	.-8      	; 0xcde <DIO_vSETPinDirection+0x1a8>
     ce6:	80 95       	com	r24
     ce8:	84 23       	and	r24, r20
     cea:	8c 93       	st	X, r24


	}


}
     cec:	0f 90       	pop	r0
     cee:	0f 90       	pop	r0
     cf0:	0f 90       	pop	r0
     cf2:	0f 90       	pop	r0
     cf4:	0f 90       	pop	r0
     cf6:	cf 91       	pop	r28
     cf8:	df 91       	pop	r29
     cfa:	08 95       	ret

00000cfc <DIO_vSetPinValue>:

void DIO_vSetPinValue(u8 PortNumber,u8 PinNumber, u8 Value)
{
     cfc:	df 93       	push	r29
     cfe:	cf 93       	push	r28
     d00:	00 d0       	rcall	.+0      	; 0xd02 <DIO_vSetPinValue+0x6>
     d02:	00 d0       	rcall	.+0      	; 0xd04 <DIO_vSetPinValue+0x8>
     d04:	0f 92       	push	r0
     d06:	cd b7       	in	r28, 0x3d	; 61
     d08:	de b7       	in	r29, 0x3e	; 62
     d0a:	89 83       	std	Y+1, r24	; 0x01
     d0c:	6a 83       	std	Y+2, r22	; 0x02
     d0e:	4b 83       	std	Y+3, r20	; 0x03
	switch (PortNumber)
     d10:	89 81       	ldd	r24, Y+1	; 0x01
     d12:	28 2f       	mov	r18, r24
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	3d 83       	std	Y+5, r19	; 0x05
     d18:	2c 83       	std	Y+4, r18	; 0x04
     d1a:	8c 81       	ldd	r24, Y+4	; 0x04
     d1c:	9d 81       	ldd	r25, Y+5	; 0x05
     d1e:	81 30       	cpi	r24, 0x01	; 1
     d20:	91 05       	cpc	r25, r1
     d22:	09 f4       	brne	.+2      	; 0xd26 <DIO_vSetPinValue+0x2a>
     d24:	43 c0       	rjmp	.+134    	; 0xdac <DIO_vSetPinValue+0xb0>
     d26:	2c 81       	ldd	r18, Y+4	; 0x04
     d28:	3d 81       	ldd	r19, Y+5	; 0x05
     d2a:	22 30       	cpi	r18, 0x02	; 2
     d2c:	31 05       	cpc	r19, r1
     d2e:	2c f4       	brge	.+10     	; 0xd3a <DIO_vSetPinValue+0x3e>
     d30:	8c 81       	ldd	r24, Y+4	; 0x04
     d32:	9d 81       	ldd	r25, Y+5	; 0x05
     d34:	00 97       	sbiw	r24, 0x00	; 0
     d36:	71 f0       	breq	.+28     	; 0xd54 <DIO_vSetPinValue+0x58>
     d38:	bc c0       	rjmp	.+376    	; 0xeb2 <DIO_vSetPinValue+0x1b6>
     d3a:	2c 81       	ldd	r18, Y+4	; 0x04
     d3c:	3d 81       	ldd	r19, Y+5	; 0x05
     d3e:	22 30       	cpi	r18, 0x02	; 2
     d40:	31 05       	cpc	r19, r1
     d42:	09 f4       	brne	.+2      	; 0xd46 <DIO_vSetPinValue+0x4a>
     d44:	5f c0       	rjmp	.+190    	; 0xe04 <DIO_vSetPinValue+0x108>
     d46:	8c 81       	ldd	r24, Y+4	; 0x04
     d48:	9d 81       	ldd	r25, Y+5	; 0x05
     d4a:	83 30       	cpi	r24, 0x03	; 3
     d4c:	91 05       	cpc	r25, r1
     d4e:	09 f4       	brne	.+2      	; 0xd52 <DIO_vSetPinValue+0x56>
     d50:	85 c0       	rjmp	.+266    	; 0xe5c <DIO_vSetPinValue+0x160>
     d52:	af c0       	rjmp	.+350    	; 0xeb2 <DIO_vSetPinValue+0x1b6>
	{
	case DIO_PORTA :
		if (Value == DIO_HIGH)
     d54:	8b 81       	ldd	r24, Y+3	; 0x03
     d56:	81 30       	cpi	r24, 0x01	; 1
     d58:	a1 f4       	brne	.+40     	; 0xd82 <DIO_vSetPinValue+0x86>
			Set_Bit(PORTA,PinNumber);
     d5a:	ab e3       	ldi	r26, 0x3B	; 59
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	eb e3       	ldi	r30, 0x3B	; 59
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	80 81       	ld	r24, Z
     d64:	48 2f       	mov	r20, r24
     d66:	8a 81       	ldd	r24, Y+2	; 0x02
     d68:	28 2f       	mov	r18, r24
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	02 2e       	mov	r0, r18
     d72:	02 c0       	rjmp	.+4      	; 0xd78 <DIO_vSetPinValue+0x7c>
     d74:	88 0f       	add	r24, r24
     d76:	99 1f       	adc	r25, r25
     d78:	0a 94       	dec	r0
     d7a:	e2 f7       	brpl	.-8      	; 0xd74 <DIO_vSetPinValue+0x78>
     d7c:	84 2b       	or	r24, r20
     d7e:	8c 93       	st	X, r24
     d80:	98 c0       	rjmp	.+304    	; 0xeb2 <DIO_vSetPinValue+0x1b6>
		else
			Clr_Bit(PORTA,PinNumber);
     d82:	ab e3       	ldi	r26, 0x3B	; 59
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	eb e3       	ldi	r30, 0x3B	; 59
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	48 2f       	mov	r20, r24
     d8e:	8a 81       	ldd	r24, Y+2	; 0x02
     d90:	28 2f       	mov	r18, r24
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	02 2e       	mov	r0, r18
     d9a:	02 c0       	rjmp	.+4      	; 0xda0 <DIO_vSetPinValue+0xa4>
     d9c:	88 0f       	add	r24, r24
     d9e:	99 1f       	adc	r25, r25
     da0:	0a 94       	dec	r0
     da2:	e2 f7       	brpl	.-8      	; 0xd9c <DIO_vSetPinValue+0xa0>
     da4:	80 95       	com	r24
     da6:	84 23       	and	r24, r20
     da8:	8c 93       	st	X, r24
     daa:	83 c0       	rjmp	.+262    	; 0xeb2 <DIO_vSetPinValue+0x1b6>
		break;
	case DIO_PORTB :
		if (Value == DIO_HIGH)
     dac:	8b 81       	ldd	r24, Y+3	; 0x03
     dae:	81 30       	cpi	r24, 0x01	; 1
     db0:	a1 f4       	brne	.+40     	; 0xdda <DIO_vSetPinValue+0xde>
			Set_Bit(PORTB,PinNumber);
     db2:	a8 e3       	ldi	r26, 0x38	; 56
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	e8 e3       	ldi	r30, 0x38	; 56
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	48 2f       	mov	r20, r24
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 2e       	mov	r0, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <DIO_vSetPinValue+0xd4>
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	0a 94       	dec	r0
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <DIO_vSetPinValue+0xd0>
     dd4:	84 2b       	or	r24, r20
     dd6:	8c 93       	st	X, r24
     dd8:	6c c0       	rjmp	.+216    	; 0xeb2 <DIO_vSetPinValue+0x1b6>
		else
			Clr_Bit(PORTB,PinNumber);
     dda:	a8 e3       	ldi	r26, 0x38	; 56
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	e8 e3       	ldi	r30, 0x38	; 56
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	48 2f       	mov	r20, r24
     de6:	8a 81       	ldd	r24, Y+2	; 0x02
     de8:	28 2f       	mov	r18, r24
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	02 2e       	mov	r0, r18
     df2:	02 c0       	rjmp	.+4      	; 0xdf8 <DIO_vSetPinValue+0xfc>
     df4:	88 0f       	add	r24, r24
     df6:	99 1f       	adc	r25, r25
     df8:	0a 94       	dec	r0
     dfa:	e2 f7       	brpl	.-8      	; 0xdf4 <DIO_vSetPinValue+0xf8>
     dfc:	80 95       	com	r24
     dfe:	84 23       	and	r24, r20
     e00:	8c 93       	st	X, r24
     e02:	57 c0       	rjmp	.+174    	; 0xeb2 <DIO_vSetPinValue+0x1b6>
		break;
	case DIO_PORTC :
		if (Value == DIO_HIGH)
     e04:	8b 81       	ldd	r24, Y+3	; 0x03
     e06:	81 30       	cpi	r24, 0x01	; 1
     e08:	a1 f4       	brne	.+40     	; 0xe32 <DIO_vSetPinValue+0x136>
			Set_Bit(PORTC,PinNumber);
     e0a:	a5 e3       	ldi	r26, 0x35	; 53
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e5 e3       	ldi	r30, 0x35	; 53
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	48 2f       	mov	r20, r24
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 2e       	mov	r0, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <DIO_vSetPinValue+0x12c>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <DIO_vSetPinValue+0x128>
     e2c:	84 2b       	or	r24, r20
     e2e:	8c 93       	st	X, r24
     e30:	40 c0       	rjmp	.+128    	; 0xeb2 <DIO_vSetPinValue+0x1b6>
		else
			Clr_Bit(PORTC,PinNumber);
     e32:	a5 e3       	ldi	r26, 0x35	; 53
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	e5 e3       	ldi	r30, 0x35	; 53
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	48 2f       	mov	r20, r24
     e3e:	8a 81       	ldd	r24, Y+2	; 0x02
     e40:	28 2f       	mov	r18, r24
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	02 2e       	mov	r0, r18
     e4a:	02 c0       	rjmp	.+4      	; 0xe50 <DIO_vSetPinValue+0x154>
     e4c:	88 0f       	add	r24, r24
     e4e:	99 1f       	adc	r25, r25
     e50:	0a 94       	dec	r0
     e52:	e2 f7       	brpl	.-8      	; 0xe4c <DIO_vSetPinValue+0x150>
     e54:	80 95       	com	r24
     e56:	84 23       	and	r24, r20
     e58:	8c 93       	st	X, r24
     e5a:	2b c0       	rjmp	.+86     	; 0xeb2 <DIO_vSetPinValue+0x1b6>
		break;

	case DIO_PORTD :
		if (Value == DIO_HIGH)
     e5c:	8b 81       	ldd	r24, Y+3	; 0x03
     e5e:	81 30       	cpi	r24, 0x01	; 1
     e60:	a1 f4       	brne	.+40     	; 0xe8a <DIO_vSetPinValue+0x18e>
			Set_Bit(PORTD,PinNumber);
     e62:	a2 e3       	ldi	r26, 0x32	; 50
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e2 e3       	ldi	r30, 0x32	; 50
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 2e       	mov	r0, r18
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <DIO_vSetPinValue+0x184>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	0a 94       	dec	r0
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <DIO_vSetPinValue+0x180>
     e84:	84 2b       	or	r24, r20
     e86:	8c 93       	st	X, r24
     e88:	14 c0       	rjmp	.+40     	; 0xeb2 <DIO_vSetPinValue+0x1b6>
		else
			Clr_Bit(PORTD,PinNumber);
     e8a:	a2 e3       	ldi	r26, 0x32	; 50
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e2 e3       	ldi	r30, 0x32	; 50
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	48 2f       	mov	r20, r24
     e96:	8a 81       	ldd	r24, Y+2	; 0x02
     e98:	28 2f       	mov	r18, r24
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	02 2e       	mov	r0, r18
     ea2:	02 c0       	rjmp	.+4      	; 0xea8 <DIO_vSetPinValue+0x1ac>
     ea4:	88 0f       	add	r24, r24
     ea6:	99 1f       	adc	r25, r25
     ea8:	0a 94       	dec	r0
     eaa:	e2 f7       	brpl	.-8      	; 0xea4 <DIO_vSetPinValue+0x1a8>
     eac:	80 95       	com	r24
     eae:	84 23       	and	r24, r20
     eb0:	8c 93       	st	X, r24
		break;
	}
}
     eb2:	0f 90       	pop	r0
     eb4:	0f 90       	pop	r0
     eb6:	0f 90       	pop	r0
     eb8:	0f 90       	pop	r0
     eba:	0f 90       	pop	r0
     ebc:	cf 91       	pop	r28
     ebe:	df 91       	pop	r29
     ec0:	08 95       	ret

00000ec2 <DIO_vSetPullUpResistor>:

void DIO_vSetPullUpResistor(u8 PortNumber,u8 PinNumber)
{
     ec2:	df 93       	push	r29
     ec4:	cf 93       	push	r28
     ec6:	00 d0       	rcall	.+0      	; 0xec8 <DIO_vSetPullUpResistor+0x6>
     ec8:	00 d0       	rcall	.+0      	; 0xeca <DIO_vSetPullUpResistor+0x8>
     eca:	cd b7       	in	r28, 0x3d	; 61
     ecc:	de b7       	in	r29, 0x3e	; 62
     ece:	89 83       	std	Y+1, r24	; 0x01
     ed0:	6a 83       	std	Y+2, r22	; 0x02
	switch (PortNumber)
     ed2:	89 81       	ldd	r24, Y+1	; 0x01
     ed4:	28 2f       	mov	r18, r24
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	3c 83       	std	Y+4, r19	; 0x04
     eda:	2b 83       	std	Y+3, r18	; 0x03
     edc:	8b 81       	ldd	r24, Y+3	; 0x03
     ede:	9c 81       	ldd	r25, Y+4	; 0x04
     ee0:	81 30       	cpi	r24, 0x01	; 1
     ee2:	91 05       	cpc	r25, r1
     ee4:	49 f1       	breq	.+82     	; 0xf38 <DIO_vSetPullUpResistor+0x76>
     ee6:	2b 81       	ldd	r18, Y+3	; 0x03
     ee8:	3c 81       	ldd	r19, Y+4	; 0x04
     eea:	22 30       	cpi	r18, 0x02	; 2
     eec:	31 05       	cpc	r19, r1
     eee:	2c f4       	brge	.+10     	; 0xefa <DIO_vSetPullUpResistor+0x38>
     ef0:	8b 81       	ldd	r24, Y+3	; 0x03
     ef2:	9c 81       	ldd	r25, Y+4	; 0x04
     ef4:	00 97       	sbiw	r24, 0x00	; 0
     ef6:	61 f0       	breq	.+24     	; 0xf10 <DIO_vSetPullUpResistor+0x4e>
     ef8:	5a c0       	rjmp	.+180    	; 0xfae <DIO_vSetPullUpResistor+0xec>
     efa:	2b 81       	ldd	r18, Y+3	; 0x03
     efc:	3c 81       	ldd	r19, Y+4	; 0x04
     efe:	22 30       	cpi	r18, 0x02	; 2
     f00:	31 05       	cpc	r19, r1
     f02:	71 f1       	breq	.+92     	; 0xf60 <DIO_vSetPullUpResistor+0x9e>
     f04:	8b 81       	ldd	r24, Y+3	; 0x03
     f06:	9c 81       	ldd	r25, Y+4	; 0x04
     f08:	83 30       	cpi	r24, 0x03	; 3
     f0a:	91 05       	cpc	r25, r1
     f0c:	e9 f1       	breq	.+122    	; 0xf88 <DIO_vSetPullUpResistor+0xc6>
     f0e:	4f c0       	rjmp	.+158    	; 0xfae <DIO_vSetPullUpResistor+0xec>
	{
	case DIO_PORTA :
			Set_Bit(PORTA,PinNumber);
     f10:	ab e3       	ldi	r26, 0x3B	; 59
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	eb e3       	ldi	r30, 0x3B	; 59
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	48 2f       	mov	r20, r24
     f1c:	8a 81       	ldd	r24, Y+2	; 0x02
     f1e:	28 2f       	mov	r18, r24
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	02 2e       	mov	r0, r18
     f28:	02 c0       	rjmp	.+4      	; 0xf2e <DIO_vSetPullUpResistor+0x6c>
     f2a:	88 0f       	add	r24, r24
     f2c:	99 1f       	adc	r25, r25
     f2e:	0a 94       	dec	r0
     f30:	e2 f7       	brpl	.-8      	; 0xf2a <DIO_vSetPullUpResistor+0x68>
     f32:	84 2b       	or	r24, r20
     f34:	8c 93       	st	X, r24
     f36:	3b c0       	rjmp	.+118    	; 0xfae <DIO_vSetPullUpResistor+0xec>
		break;
	case DIO_PORTB :
			Set_Bit(PORTB,PinNumber);
     f38:	a8 e3       	ldi	r26, 0x38	; 56
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	e8 e3       	ldi	r30, 0x38	; 56
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	48 2f       	mov	r20, r24
     f44:	8a 81       	ldd	r24, Y+2	; 0x02
     f46:	28 2f       	mov	r18, r24
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	02 2e       	mov	r0, r18
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <DIO_vSetPullUpResistor+0x94>
     f52:	88 0f       	add	r24, r24
     f54:	99 1f       	adc	r25, r25
     f56:	0a 94       	dec	r0
     f58:	e2 f7       	brpl	.-8      	; 0xf52 <DIO_vSetPullUpResistor+0x90>
     f5a:	84 2b       	or	r24, r20
     f5c:	8c 93       	st	X, r24
     f5e:	27 c0       	rjmp	.+78     	; 0xfae <DIO_vSetPullUpResistor+0xec>
		break;
	case DIO_PORTC :

			Set_Bit(PORTC,PinNumber);
     f60:	a5 e3       	ldi	r26, 0x35	; 53
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	e5 e3       	ldi	r30, 0x35	; 53
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	48 2f       	mov	r20, r24
     f6c:	8a 81       	ldd	r24, Y+2	; 0x02
     f6e:	28 2f       	mov	r18, r24
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	02 2e       	mov	r0, r18
     f78:	02 c0       	rjmp	.+4      	; 0xf7e <DIO_vSetPullUpResistor+0xbc>
     f7a:	88 0f       	add	r24, r24
     f7c:	99 1f       	adc	r25, r25
     f7e:	0a 94       	dec	r0
     f80:	e2 f7       	brpl	.-8      	; 0xf7a <DIO_vSetPullUpResistor+0xb8>
     f82:	84 2b       	or	r24, r20
     f84:	8c 93       	st	X, r24
     f86:	13 c0       	rjmp	.+38     	; 0xfae <DIO_vSetPullUpResistor+0xec>
		break;

	case DIO_PORTD :

			Set_Bit(PORTD,PinNumber);
     f88:	a2 e3       	ldi	r26, 0x32	; 50
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	e2 e3       	ldi	r30, 0x32	; 50
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	48 2f       	mov	r20, r24
     f94:	8a 81       	ldd	r24, Y+2	; 0x02
     f96:	28 2f       	mov	r18, r24
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	02 2e       	mov	r0, r18
     fa0:	02 c0       	rjmp	.+4      	; 0xfa6 <DIO_vSetPullUpResistor+0xe4>
     fa2:	88 0f       	add	r24, r24
     fa4:	99 1f       	adc	r25, r25
     fa6:	0a 94       	dec	r0
     fa8:	e2 f7       	brpl	.-8      	; 0xfa2 <DIO_vSetPullUpResistor+0xe0>
     faa:	84 2b       	or	r24, r20
     fac:	8c 93       	st	X, r24
		break;
	}
}
     fae:	0f 90       	pop	r0
     fb0:	0f 90       	pop	r0
     fb2:	0f 90       	pop	r0
     fb4:	0f 90       	pop	r0
     fb6:	cf 91       	pop	r28
     fb8:	df 91       	pop	r29
     fba:	08 95       	ret

00000fbc <DIO_u8GetPinValue>:



u8 DIO_u8GetPinValue(u8 PortNumber,u8 PinNumber)
{
     fbc:	df 93       	push	r29
     fbe:	cf 93       	push	r28
     fc0:	00 d0       	rcall	.+0      	; 0xfc2 <DIO_u8GetPinValue+0x6>
     fc2:	00 d0       	rcall	.+0      	; 0xfc4 <DIO_u8GetPinValue+0x8>
     fc4:	00 d0       	rcall	.+0      	; 0xfc6 <DIO_u8GetPinValue+0xa>
     fc6:	cd b7       	in	r28, 0x3d	; 61
     fc8:	de b7       	in	r29, 0x3e	; 62
     fca:	89 83       	std	Y+1, r24	; 0x01
     fcc:	6a 83       	std	Y+2, r22	; 0x02

	switch (PortNumber)
     fce:	89 81       	ldd	r24, Y+1	; 0x01
     fd0:	28 2f       	mov	r18, r24
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	3d 83       	std	Y+5, r19	; 0x05
     fd6:	2c 83       	std	Y+4, r18	; 0x04
     fd8:	4c 81       	ldd	r20, Y+4	; 0x04
     fda:	5d 81       	ldd	r21, Y+5	; 0x05
     fdc:	41 30       	cpi	r20, 0x01	; 1
     fde:	51 05       	cpc	r21, r1
     fe0:	49 f1       	breq	.+82     	; 0x1034 <DIO_u8GetPinValue+0x78>
     fe2:	8c 81       	ldd	r24, Y+4	; 0x04
     fe4:	9d 81       	ldd	r25, Y+5	; 0x05
     fe6:	82 30       	cpi	r24, 0x02	; 2
     fe8:	91 05       	cpc	r25, r1
     fea:	34 f4       	brge	.+12     	; 0xff8 <DIO_u8GetPinValue+0x3c>
     fec:	2c 81       	ldd	r18, Y+4	; 0x04
     fee:	3d 81       	ldd	r19, Y+5	; 0x05
     ff0:	21 15       	cp	r18, r1
     ff2:	31 05       	cpc	r19, r1
     ff4:	61 f0       	breq	.+24     	; 0x100e <DIO_u8GetPinValue+0x52>
     ff6:	57 c0       	rjmp	.+174    	; 0x10a6 <DIO_u8GetPinValue+0xea>
     ff8:	4c 81       	ldd	r20, Y+4	; 0x04
     ffa:	5d 81       	ldd	r21, Y+5	; 0x05
     ffc:	42 30       	cpi	r20, 0x02	; 2
     ffe:	51 05       	cpc	r21, r1
    1000:	61 f1       	breq	.+88     	; 0x105a <DIO_u8GetPinValue+0x9e>
    1002:	8c 81       	ldd	r24, Y+4	; 0x04
    1004:	9d 81       	ldd	r25, Y+5	; 0x05
    1006:	83 30       	cpi	r24, 0x03	; 3
    1008:	91 05       	cpc	r25, r1
    100a:	d1 f1       	breq	.+116    	; 0x1080 <DIO_u8GetPinValue+0xc4>
    100c:	4c c0       	rjmp	.+152    	; 0x10a6 <DIO_u8GetPinValue+0xea>
	{
	case DIO_PORTA :
		return  Get_Bit(PINA,PinNumber)  ;
    100e:	e9 e3       	ldi	r30, 0x39	; 57
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	28 2f       	mov	r18, r24
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	8a 81       	ldd	r24, Y+2	; 0x02
    101a:	88 2f       	mov	r24, r24
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	a9 01       	movw	r20, r18
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <DIO_u8GetPinValue+0x6a>
    1022:	55 95       	asr	r21
    1024:	47 95       	ror	r20
    1026:	8a 95       	dec	r24
    1028:	e2 f7       	brpl	.-8      	; 0x1022 <DIO_u8GetPinValue+0x66>
    102a:	ca 01       	movw	r24, r20
    102c:	58 2f       	mov	r21, r24
    102e:	51 70       	andi	r21, 0x01	; 1
    1030:	5b 83       	std	Y+3, r21	; 0x03
    1032:	3a c0       	rjmp	.+116    	; 0x10a8 <DIO_u8GetPinValue+0xec>
		break;
	case DIO_PORTB :
		return  Get_Bit(PINB,PinNumber)  ;
    1034:	e6 e3       	ldi	r30, 0x36	; 54
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	28 2f       	mov	r18, r24
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	8a 81       	ldd	r24, Y+2	; 0x02
    1040:	88 2f       	mov	r24, r24
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	a9 01       	movw	r20, r18
    1046:	02 c0       	rjmp	.+4      	; 0x104c <DIO_u8GetPinValue+0x90>
    1048:	55 95       	asr	r21
    104a:	47 95       	ror	r20
    104c:	8a 95       	dec	r24
    104e:	e2 f7       	brpl	.-8      	; 0x1048 <DIO_u8GetPinValue+0x8c>
    1050:	ca 01       	movw	r24, r20
    1052:	58 2f       	mov	r21, r24
    1054:	51 70       	andi	r21, 0x01	; 1
    1056:	5b 83       	std	Y+3, r21	; 0x03
    1058:	27 c0       	rjmp	.+78     	; 0x10a8 <DIO_u8GetPinValue+0xec>
		break;
	case DIO_PORTC :
		return  Get_Bit(PINC,PinNumber)  ;
    105a:	e3 e3       	ldi	r30, 0x33	; 51
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	28 2f       	mov	r18, r24
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	8a 81       	ldd	r24, Y+2	; 0x02
    1066:	88 2f       	mov	r24, r24
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	a9 01       	movw	r20, r18
    106c:	02 c0       	rjmp	.+4      	; 0x1072 <DIO_u8GetPinValue+0xb6>
    106e:	55 95       	asr	r21
    1070:	47 95       	ror	r20
    1072:	8a 95       	dec	r24
    1074:	e2 f7       	brpl	.-8      	; 0x106e <DIO_u8GetPinValue+0xb2>
    1076:	ca 01       	movw	r24, r20
    1078:	58 2f       	mov	r21, r24
    107a:	51 70       	andi	r21, 0x01	; 1
    107c:	5b 83       	std	Y+3, r21	; 0x03
    107e:	14 c0       	rjmp	.+40     	; 0x10a8 <DIO_u8GetPinValue+0xec>
		break;
	case DIO_PORTD :
		return  Get_Bit(PIND,PinNumber)  ;
    1080:	e0 e3       	ldi	r30, 0x30	; 48
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	28 2f       	mov	r18, r24
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	88 2f       	mov	r24, r24
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	a9 01       	movw	r20, r18
    1092:	02 c0       	rjmp	.+4      	; 0x1098 <DIO_u8GetPinValue+0xdc>
    1094:	55 95       	asr	r21
    1096:	47 95       	ror	r20
    1098:	8a 95       	dec	r24
    109a:	e2 f7       	brpl	.-8      	; 0x1094 <DIO_u8GetPinValue+0xd8>
    109c:	ca 01       	movw	r24, r20
    109e:	58 2f       	mov	r21, r24
    10a0:	51 70       	andi	r21, 0x01	; 1
    10a2:	5b 83       	std	Y+3, r21	; 0x03
    10a4:	01 c0       	rjmp	.+2      	; 0x10a8 <DIO_u8GetPinValue+0xec>
    10a6:	02 c0       	rjmp	.+4      	; 0x10ac <DIO_u8GetPinValue+0xf0>
		break;
	}
}
    10a8:	8b 81       	ldd	r24, Y+3	; 0x03
    10aa:	8e 83       	std	Y+6, r24	; 0x06
    10ac:	8e 81       	ldd	r24, Y+6	; 0x06
    10ae:	26 96       	adiw	r28, 0x06	; 6
    10b0:	0f b6       	in	r0, 0x3f	; 63
    10b2:	f8 94       	cli
    10b4:	de bf       	out	0x3e, r29	; 62
    10b6:	0f be       	out	0x3f, r0	; 63
    10b8:	cd bf       	out	0x3d, r28	; 61
    10ba:	cf 91       	pop	r28
    10bc:	df 91       	pop	r29
    10be:	08 95       	ret

000010c0 <DIO_vSetPortValue>:

void DIO_vSetPortValue(u8 PortNumber, u8 Data ){
    10c0:	df 93       	push	r29
    10c2:	cf 93       	push	r28
    10c4:	00 d0       	rcall	.+0      	; 0x10c6 <DIO_vSetPortValue+0x6>
    10c6:	00 d0       	rcall	.+0      	; 0x10c8 <DIO_vSetPortValue+0x8>
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62
    10cc:	89 83       	std	Y+1, r24	; 0x01
    10ce:	6a 83       	std	Y+2, r22	; 0x02
	switch (PortNumber){
    10d0:	89 81       	ldd	r24, Y+1	; 0x01
    10d2:	28 2f       	mov	r18, r24
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	3c 83       	std	Y+4, r19	; 0x04
    10d8:	2b 83       	std	Y+3, r18	; 0x03
    10da:	8b 81       	ldd	r24, Y+3	; 0x03
    10dc:	9c 81       	ldd	r25, Y+4	; 0x04
    10de:	81 30       	cpi	r24, 0x01	; 1
    10e0:	91 05       	cpc	r25, r1
    10e2:	d1 f0       	breq	.+52     	; 0x1118 <DIO_vSetPortValue+0x58>
    10e4:	2b 81       	ldd	r18, Y+3	; 0x03
    10e6:	3c 81       	ldd	r19, Y+4	; 0x04
    10e8:	22 30       	cpi	r18, 0x02	; 2
    10ea:	31 05       	cpc	r19, r1
    10ec:	2c f4       	brge	.+10     	; 0x10f8 <DIO_vSetPortValue+0x38>
    10ee:	8b 81       	ldd	r24, Y+3	; 0x03
    10f0:	9c 81       	ldd	r25, Y+4	; 0x04
    10f2:	00 97       	sbiw	r24, 0x00	; 0
    10f4:	61 f0       	breq	.+24     	; 0x110e <DIO_vSetPortValue+0x4e>
    10f6:	1e c0       	rjmp	.+60     	; 0x1134 <DIO_vSetPortValue+0x74>
    10f8:	2b 81       	ldd	r18, Y+3	; 0x03
    10fa:	3c 81       	ldd	r19, Y+4	; 0x04
    10fc:	22 30       	cpi	r18, 0x02	; 2
    10fe:	31 05       	cpc	r19, r1
    1100:	81 f0       	breq	.+32     	; 0x1122 <DIO_vSetPortValue+0x62>
    1102:	8b 81       	ldd	r24, Y+3	; 0x03
    1104:	9c 81       	ldd	r25, Y+4	; 0x04
    1106:	83 30       	cpi	r24, 0x03	; 3
    1108:	91 05       	cpc	r25, r1
    110a:	81 f0       	breq	.+32     	; 0x112c <DIO_vSetPortValue+0x6c>
    110c:	13 c0       	rjmp	.+38     	; 0x1134 <DIO_vSetPortValue+0x74>
	case DIO_PORTA :
		PORTA=Data;
    110e:	eb e3       	ldi	r30, 0x3B	; 59
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	80 83       	st	Z, r24
    1116:	0e c0       	rjmp	.+28     	; 0x1134 <DIO_vSetPortValue+0x74>
		break;
	case DIO_PORTB :
		PORTA=Data;
    1118:	eb e3       	ldi	r30, 0x3B	; 59
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	80 83       	st	Z, r24
    1120:	09 c0       	rjmp	.+18     	; 0x1134 <DIO_vSetPortValue+0x74>
		break;
	case DIO_PORTC :
		PORTA=Data;
    1122:	eb e3       	ldi	r30, 0x3B	; 59
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	80 83       	st	Z, r24
    112a:	04 c0       	rjmp	.+8      	; 0x1134 <DIO_vSetPortValue+0x74>
		break;
	case DIO_PORTD :
		PORTA=Data;
    112c:	eb e3       	ldi	r30, 0x3B	; 59
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	8a 81       	ldd	r24, Y+2	; 0x02
    1132:	80 83       	st	Z, r24
		break;

	}

}
    1134:	0f 90       	pop	r0
    1136:	0f 90       	pop	r0
    1138:	0f 90       	pop	r0
    113a:	0f 90       	pop	r0
    113c:	cf 91       	pop	r28
    113e:	df 91       	pop	r29
    1140:	08 95       	ret

00001142 <DIO_vSetPortDirection>:

void DIO_vSetPortDirection(u8 PortNumber, u8 Data ){
    1142:	df 93       	push	r29
    1144:	cf 93       	push	r28
    1146:	00 d0       	rcall	.+0      	; 0x1148 <DIO_vSetPortDirection+0x6>
    1148:	00 d0       	rcall	.+0      	; 0x114a <DIO_vSetPortDirection+0x8>
    114a:	cd b7       	in	r28, 0x3d	; 61
    114c:	de b7       	in	r29, 0x3e	; 62
    114e:	89 83       	std	Y+1, r24	; 0x01
    1150:	6a 83       	std	Y+2, r22	; 0x02
	switch (PortNumber){
    1152:	89 81       	ldd	r24, Y+1	; 0x01
    1154:	28 2f       	mov	r18, r24
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	3c 83       	std	Y+4, r19	; 0x04
    115a:	2b 83       	std	Y+3, r18	; 0x03
    115c:	8b 81       	ldd	r24, Y+3	; 0x03
    115e:	9c 81       	ldd	r25, Y+4	; 0x04
    1160:	81 30       	cpi	r24, 0x01	; 1
    1162:	91 05       	cpc	r25, r1
    1164:	d1 f0       	breq	.+52     	; 0x119a <DIO_vSetPortDirection+0x58>
    1166:	2b 81       	ldd	r18, Y+3	; 0x03
    1168:	3c 81       	ldd	r19, Y+4	; 0x04
    116a:	22 30       	cpi	r18, 0x02	; 2
    116c:	31 05       	cpc	r19, r1
    116e:	2c f4       	brge	.+10     	; 0x117a <DIO_vSetPortDirection+0x38>
    1170:	8b 81       	ldd	r24, Y+3	; 0x03
    1172:	9c 81       	ldd	r25, Y+4	; 0x04
    1174:	00 97       	sbiw	r24, 0x00	; 0
    1176:	61 f0       	breq	.+24     	; 0x1190 <DIO_vSetPortDirection+0x4e>
    1178:	1e c0       	rjmp	.+60     	; 0x11b6 <DIO_vSetPortDirection+0x74>
    117a:	2b 81       	ldd	r18, Y+3	; 0x03
    117c:	3c 81       	ldd	r19, Y+4	; 0x04
    117e:	22 30       	cpi	r18, 0x02	; 2
    1180:	31 05       	cpc	r19, r1
    1182:	81 f0       	breq	.+32     	; 0x11a4 <DIO_vSetPortDirection+0x62>
    1184:	8b 81       	ldd	r24, Y+3	; 0x03
    1186:	9c 81       	ldd	r25, Y+4	; 0x04
    1188:	83 30       	cpi	r24, 0x03	; 3
    118a:	91 05       	cpc	r25, r1
    118c:	81 f0       	breq	.+32     	; 0x11ae <DIO_vSetPortDirection+0x6c>
    118e:	13 c0       	rjmp	.+38     	; 0x11b6 <DIO_vSetPortDirection+0x74>
	case DIO_PORTA :
		DDRA=Data;
    1190:	ea e3       	ldi	r30, 0x3A	; 58
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	8a 81       	ldd	r24, Y+2	; 0x02
    1196:	80 83       	st	Z, r24
    1198:	0e c0       	rjmp	.+28     	; 0x11b6 <DIO_vSetPortDirection+0x74>
		break;
	case DIO_PORTB :
		DDRB=Data;
    119a:	e7 e3       	ldi	r30, 0x37	; 55
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	8a 81       	ldd	r24, Y+2	; 0x02
    11a0:	80 83       	st	Z, r24
    11a2:	09 c0       	rjmp	.+18     	; 0x11b6 <DIO_vSetPortDirection+0x74>
		break;
	case DIO_PORTC :
		DDRC=Data;
    11a4:	e4 e3       	ldi	r30, 0x34	; 52
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	8a 81       	ldd	r24, Y+2	; 0x02
    11aa:	80 83       	st	Z, r24
    11ac:	04 c0       	rjmp	.+8      	; 0x11b6 <DIO_vSetPortDirection+0x74>
		break;
	case DIO_PORTD :
		DDRD=Data;
    11ae:	e1 e3       	ldi	r30, 0x31	; 49
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	8a 81       	ldd	r24, Y+2	; 0x02
    11b4:	80 83       	st	Z, r24
		break;

	}
}
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	0f 90       	pop	r0
    11be:	cf 91       	pop	r28
    11c0:	df 91       	pop	r29
    11c2:	08 95       	ret

000011c4 <LCD_vWriteData>:
#include <util/delay.h>

// This function writes single character on the LCD

void LCD_vWriteData( u8 Data)
{
    11c4:	df 93       	push	r29
    11c6:	cf 93       	push	r28
    11c8:	cd b7       	in	r28, 0x3d	; 61
    11ca:	de b7       	in	r29, 0x3e	; 62
    11cc:	2f 97       	sbiw	r28, 0x0f	; 15
    11ce:	0f b6       	in	r0, 0x3f	; 63
    11d0:	f8 94       	cli
    11d2:	de bf       	out	0x3e, r29	; 62
    11d4:	0f be       	out	0x3f, r0	; 63
    11d6:	cd bf       	out	0x3d, r28	; 61
    11d8:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_vSetPinValue(LCD_CONTROL_PORT,LCD_RS,DIO_HIGH);            //Sets  RS pin to 1
    11da:	82 e0       	ldi	r24, 0x02	; 2
    11dc:	60 e0       	ldi	r22, 0x00	; 0
    11de:	41 e0       	ldi	r20, 0x01	; 1
    11e0:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_vSetPinValue>
	DIO_vSetPinValue(LCD_CONTROL_PORT,LCD_RW,DIO_LOW);             //Sets RW pin to  0
    11e4:	82 e0       	ldi	r24, 0x02	; 2
    11e6:	61 e0       	ldi	r22, 0x01	; 1
    11e8:	40 e0       	ldi	r20, 0x00	; 0
    11ea:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_vSetPinValue>
	DIO_vSetPortValue(LCD_DATA_PORT,Data);                         //Puts Data  on LCD_DATA_PORT
    11ee:	80 e0       	ldi	r24, 0x00	; 0
    11f0:	6f 85       	ldd	r22, Y+15	; 0x0f
    11f2:	0e 94 60 08 	call	0x10c0	; 0x10c0 <DIO_vSetPortValue>
	DIO_vSetPinValue(LCD_CONTROL_PORT,LCD_ENABLE,DIO_HIGH);        //Sets  LCD_ENABLE to high
    11f6:	82 e0       	ldi	r24, 0x02	; 2
    11f8:	62 e0       	ldi	r22, 0x02	; 2
    11fa:	41 e0       	ldi	r20, 0x01	; 1
    11fc:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_vSetPinValue>
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	a0 e2       	ldi	r26, 0x20	; 32
    1206:	b1 e4       	ldi	r27, 0x41	; 65
    1208:	8b 87       	std	Y+11, r24	; 0x0b
    120a:	9c 87       	std	Y+12, r25	; 0x0c
    120c:	ad 87       	std	Y+13, r26	; 0x0d
    120e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1210:	6b 85       	ldd	r22, Y+11	; 0x0b
    1212:	7c 85       	ldd	r23, Y+12	; 0x0c
    1214:	8d 85       	ldd	r24, Y+13	; 0x0d
    1216:	9e 85       	ldd	r25, Y+14	; 0x0e
    1218:	20 e0       	ldi	r18, 0x00	; 0
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	4a ef       	ldi	r20, 0xFA	; 250
    121e:	54 e4       	ldi	r21, 0x44	; 68
    1220:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1224:	dc 01       	movw	r26, r24
    1226:	cb 01       	movw	r24, r22
    1228:	8f 83       	std	Y+7, r24	; 0x07
    122a:	98 87       	std	Y+8, r25	; 0x08
    122c:	a9 87       	std	Y+9, r26	; 0x09
    122e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1230:	6f 81       	ldd	r22, Y+7	; 0x07
    1232:	78 85       	ldd	r23, Y+8	; 0x08
    1234:	89 85       	ldd	r24, Y+9	; 0x09
    1236:	9a 85       	ldd	r25, Y+10	; 0x0a
    1238:	20 e0       	ldi	r18, 0x00	; 0
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	40 e8       	ldi	r20, 0x80	; 128
    123e:	5f e3       	ldi	r21, 0x3F	; 63
    1240:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1244:	88 23       	and	r24, r24
    1246:	2c f4       	brge	.+10     	; 0x1252 <LCD_vWriteData+0x8e>
		__ticks = 1;
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	9e 83       	std	Y+6, r25	; 0x06
    124e:	8d 83       	std	Y+5, r24	; 0x05
    1250:	3f c0       	rjmp	.+126    	; 0x12d0 <LCD_vWriteData+0x10c>
	else if (__tmp > 65535)
    1252:	6f 81       	ldd	r22, Y+7	; 0x07
    1254:	78 85       	ldd	r23, Y+8	; 0x08
    1256:	89 85       	ldd	r24, Y+9	; 0x09
    1258:	9a 85       	ldd	r25, Y+10	; 0x0a
    125a:	20 e0       	ldi	r18, 0x00	; 0
    125c:	3f ef       	ldi	r19, 0xFF	; 255
    125e:	4f e7       	ldi	r20, 0x7F	; 127
    1260:	57 e4       	ldi	r21, 0x47	; 71
    1262:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1266:	18 16       	cp	r1, r24
    1268:	4c f5       	brge	.+82     	; 0x12bc <LCD_vWriteData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    126a:	6b 85       	ldd	r22, Y+11	; 0x0b
    126c:	7c 85       	ldd	r23, Y+12	; 0x0c
    126e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1270:	9e 85       	ldd	r25, Y+14	; 0x0e
    1272:	20 e0       	ldi	r18, 0x00	; 0
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	40 e2       	ldi	r20, 0x20	; 32
    1278:	51 e4       	ldi	r21, 0x41	; 65
    127a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    127e:	dc 01       	movw	r26, r24
    1280:	cb 01       	movw	r24, r22
    1282:	bc 01       	movw	r22, r24
    1284:	cd 01       	movw	r24, r26
    1286:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    128a:	dc 01       	movw	r26, r24
    128c:	cb 01       	movw	r24, r22
    128e:	9e 83       	std	Y+6, r25	; 0x06
    1290:	8d 83       	std	Y+5, r24	; 0x05
    1292:	0f c0       	rjmp	.+30     	; 0x12b2 <LCD_vWriteData+0xee>
    1294:	88 ec       	ldi	r24, 0xC8	; 200
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	9c 83       	std	Y+4, r25	; 0x04
    129a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    129c:	8b 81       	ldd	r24, Y+3	; 0x03
    129e:	9c 81       	ldd	r25, Y+4	; 0x04
    12a0:	01 97       	sbiw	r24, 0x01	; 1
    12a2:	f1 f7       	brne	.-4      	; 0x12a0 <LCD_vWriteData+0xdc>
    12a4:	9c 83       	std	Y+4, r25	; 0x04
    12a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12a8:	8d 81       	ldd	r24, Y+5	; 0x05
    12aa:	9e 81       	ldd	r25, Y+6	; 0x06
    12ac:	01 97       	sbiw	r24, 0x01	; 1
    12ae:	9e 83       	std	Y+6, r25	; 0x06
    12b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12b2:	8d 81       	ldd	r24, Y+5	; 0x05
    12b4:	9e 81       	ldd	r25, Y+6	; 0x06
    12b6:	00 97       	sbiw	r24, 0x00	; 0
    12b8:	69 f7       	brne	.-38     	; 0x1294 <LCD_vWriteData+0xd0>
    12ba:	14 c0       	rjmp	.+40     	; 0x12e4 <LCD_vWriteData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12bc:	6f 81       	ldd	r22, Y+7	; 0x07
    12be:	78 85       	ldd	r23, Y+8	; 0x08
    12c0:	89 85       	ldd	r24, Y+9	; 0x09
    12c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    12c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12c8:	dc 01       	movw	r26, r24
    12ca:	cb 01       	movw	r24, r22
    12cc:	9e 83       	std	Y+6, r25	; 0x06
    12ce:	8d 83       	std	Y+5, r24	; 0x05
    12d0:	8d 81       	ldd	r24, Y+5	; 0x05
    12d2:	9e 81       	ldd	r25, Y+6	; 0x06
    12d4:	9a 83       	std	Y+2, r25	; 0x02
    12d6:	89 83       	std	Y+1, r24	; 0x01
    12d8:	89 81       	ldd	r24, Y+1	; 0x01
    12da:	9a 81       	ldd	r25, Y+2	; 0x02
    12dc:	01 97       	sbiw	r24, 0x01	; 1
    12de:	f1 f7       	brne	.-4      	; 0x12dc <LCD_vWriteData+0x118>
    12e0:	9a 83       	std	Y+2, r25	; 0x02
    12e2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_vSetPinValue(LCD_CONTROL_PORT,LCD_ENABLE,DIO_LOW);         //Sets  LCD_ENABLE to low
    12e4:	82 e0       	ldi	r24, 0x02	; 2
    12e6:	62 e0       	ldi	r22, 0x02	; 2
    12e8:	40 e0       	ldi	r20, 0x00	; 0
    12ea:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_vSetPinValue>

}
    12ee:	2f 96       	adiw	r28, 0x0f	; 15
    12f0:	0f b6       	in	r0, 0x3f	; 63
    12f2:	f8 94       	cli
    12f4:	de bf       	out	0x3e, r29	; 62
    12f6:	0f be       	out	0x3f, r0	; 63
    12f8:	cd bf       	out	0x3d, r28	; 61
    12fa:	cf 91       	pop	r28
    12fc:	df 91       	pop	r29
    12fe:	08 95       	ret

00001300 <LCD_vWriteDataString>:
// This function writes string on the LCD

void LCD_vWriteDataString(u8 * Data)
{
    1300:	df 93       	push	r29
    1302:	cf 93       	push	r28
    1304:	00 d0       	rcall	.+0      	; 0x1306 <LCD_vWriteDataString+0x6>
    1306:	cd b7       	in	r28, 0x3d	; 61
    1308:	de b7       	in	r29, 0x3e	; 62
    130a:	9a 83       	std	Y+2, r25	; 0x02
    130c:	89 83       	std	Y+1, r24	; 0x01
    130e:	0b c0       	rjmp	.+22     	; 0x1326 <LCD_vWriteDataString+0x26>
	while(*Data )
	{
		LCD_vWriteData(*Data++);
    1310:	e9 81       	ldd	r30, Y+1	; 0x01
    1312:	fa 81       	ldd	r31, Y+2	; 0x02
    1314:	20 81       	ld	r18, Z
    1316:	89 81       	ldd	r24, Y+1	; 0x01
    1318:	9a 81       	ldd	r25, Y+2	; 0x02
    131a:	01 96       	adiw	r24, 0x01	; 1
    131c:	9a 83       	std	Y+2, r25	; 0x02
    131e:	89 83       	std	Y+1, r24	; 0x01
    1320:	82 2f       	mov	r24, r18
    1322:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <LCD_vWriteData>
}
// This function writes string on the LCD

void LCD_vWriteDataString(u8 * Data)
{
	while(*Data )
    1326:	e9 81       	ldd	r30, Y+1	; 0x01
    1328:	fa 81       	ldd	r31, Y+2	; 0x02
    132a:	80 81       	ld	r24, Z
    132c:	88 23       	and	r24, r24
    132e:	81 f7       	brne	.-32     	; 0x1310 <LCD_vWriteDataString+0x10>
	{
		LCD_vWriteData(*Data++);

	}
}
    1330:	0f 90       	pop	r0
    1332:	0f 90       	pop	r0
    1334:	cf 91       	pop	r28
    1336:	df 91       	pop	r29
    1338:	08 95       	ret

0000133a <LCD_vWriteCommand>:


// This function send a command to the LCD
void LCD_vWriteCommand(u8 Command)
{
    133a:	df 93       	push	r29
    133c:	cf 93       	push	r28
    133e:	cd b7       	in	r28, 0x3d	; 61
    1340:	de b7       	in	r29, 0x3e	; 62
    1342:	2f 97       	sbiw	r28, 0x0f	; 15
    1344:	0f b6       	in	r0, 0x3f	; 63
    1346:	f8 94       	cli
    1348:	de bf       	out	0x3e, r29	; 62
    134a:	0f be       	out	0x3f, r0	; 63
    134c:	cd bf       	out	0x3d, r28	; 61
    134e:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_vSetPinValue(LCD_CONTROL_PORT,LCD_RS,DIO_LOW);             //Sets  RS pin to 0
    1350:	82 e0       	ldi	r24, 0x02	; 2
    1352:	60 e0       	ldi	r22, 0x00	; 0
    1354:	40 e0       	ldi	r20, 0x00	; 0
    1356:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_vSetPinValue>
	DIO_vSetPinValue(LCD_CONTROL_PORT,LCD_RW,DIO_LOW);            //Sets RW pin to  0
    135a:	82 e0       	ldi	r24, 0x02	; 2
    135c:	61 e0       	ldi	r22, 0x01	; 1
    135e:	40 e0       	ldi	r20, 0x00	; 0
    1360:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_vSetPinValue>
	DIO_vSetPortValue(LCD_DATA_PORT, Command );                  //Puts Command  on LCD_DATA_PORT
    1364:	80 e0       	ldi	r24, 0x00	; 0
    1366:	6f 85       	ldd	r22, Y+15	; 0x0f
    1368:	0e 94 60 08 	call	0x10c0	; 0x10c0 <DIO_vSetPortValue>
	DIO_vSetPinValue(LCD_CONTROL_PORT,LCD_ENABLE,DIO_HIGH);      //Sets  LCD_ENABLE to high
    136c:	82 e0       	ldi	r24, 0x02	; 2
    136e:	62 e0       	ldi	r22, 0x02	; 2
    1370:	41 e0       	ldi	r20, 0x01	; 1
    1372:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_vSetPinValue>
    1376:	80 e0       	ldi	r24, 0x00	; 0
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	a0 e2       	ldi	r26, 0x20	; 32
    137c:	b1 e4       	ldi	r27, 0x41	; 65
    137e:	8b 87       	std	Y+11, r24	; 0x0b
    1380:	9c 87       	std	Y+12, r25	; 0x0c
    1382:	ad 87       	std	Y+13, r26	; 0x0d
    1384:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1386:	6b 85       	ldd	r22, Y+11	; 0x0b
    1388:	7c 85       	ldd	r23, Y+12	; 0x0c
    138a:	8d 85       	ldd	r24, Y+13	; 0x0d
    138c:	9e 85       	ldd	r25, Y+14	; 0x0e
    138e:	20 e0       	ldi	r18, 0x00	; 0
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	4a ef       	ldi	r20, 0xFA	; 250
    1394:	54 e4       	ldi	r21, 0x44	; 68
    1396:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    139a:	dc 01       	movw	r26, r24
    139c:	cb 01       	movw	r24, r22
    139e:	8f 83       	std	Y+7, r24	; 0x07
    13a0:	98 87       	std	Y+8, r25	; 0x08
    13a2:	a9 87       	std	Y+9, r26	; 0x09
    13a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13a6:	6f 81       	ldd	r22, Y+7	; 0x07
    13a8:	78 85       	ldd	r23, Y+8	; 0x08
    13aa:	89 85       	ldd	r24, Y+9	; 0x09
    13ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ae:	20 e0       	ldi	r18, 0x00	; 0
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	40 e8       	ldi	r20, 0x80	; 128
    13b4:	5f e3       	ldi	r21, 0x3F	; 63
    13b6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    13ba:	88 23       	and	r24, r24
    13bc:	2c f4       	brge	.+10     	; 0x13c8 <LCD_vWriteCommand+0x8e>
		__ticks = 1;
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	9e 83       	std	Y+6, r25	; 0x06
    13c4:	8d 83       	std	Y+5, r24	; 0x05
    13c6:	3f c0       	rjmp	.+126    	; 0x1446 <LCD_vWriteCommand+0x10c>
	else if (__tmp > 65535)
    13c8:	6f 81       	ldd	r22, Y+7	; 0x07
    13ca:	78 85       	ldd	r23, Y+8	; 0x08
    13cc:	89 85       	ldd	r24, Y+9	; 0x09
    13ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	3f ef       	ldi	r19, 0xFF	; 255
    13d4:	4f e7       	ldi	r20, 0x7F	; 127
    13d6:	57 e4       	ldi	r21, 0x47	; 71
    13d8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    13dc:	18 16       	cp	r1, r24
    13de:	4c f5       	brge	.+82     	; 0x1432 <LCD_vWriteCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    13e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    13e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    13e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    13e8:	20 e0       	ldi	r18, 0x00	; 0
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	40 e2       	ldi	r20, 0x20	; 32
    13ee:	51 e4       	ldi	r21, 0x41	; 65
    13f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13f4:	dc 01       	movw	r26, r24
    13f6:	cb 01       	movw	r24, r22
    13f8:	bc 01       	movw	r22, r24
    13fa:	cd 01       	movw	r24, r26
    13fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1400:	dc 01       	movw	r26, r24
    1402:	cb 01       	movw	r24, r22
    1404:	9e 83       	std	Y+6, r25	; 0x06
    1406:	8d 83       	std	Y+5, r24	; 0x05
    1408:	0f c0       	rjmp	.+30     	; 0x1428 <LCD_vWriteCommand+0xee>
    140a:	88 ec       	ldi	r24, 0xC8	; 200
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	9c 83       	std	Y+4, r25	; 0x04
    1410:	8b 83       	std	Y+3, r24	; 0x03
    1412:	8b 81       	ldd	r24, Y+3	; 0x03
    1414:	9c 81       	ldd	r25, Y+4	; 0x04
    1416:	01 97       	sbiw	r24, 0x01	; 1
    1418:	f1 f7       	brne	.-4      	; 0x1416 <LCD_vWriteCommand+0xdc>
    141a:	9c 83       	std	Y+4, r25	; 0x04
    141c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    141e:	8d 81       	ldd	r24, Y+5	; 0x05
    1420:	9e 81       	ldd	r25, Y+6	; 0x06
    1422:	01 97       	sbiw	r24, 0x01	; 1
    1424:	9e 83       	std	Y+6, r25	; 0x06
    1426:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1428:	8d 81       	ldd	r24, Y+5	; 0x05
    142a:	9e 81       	ldd	r25, Y+6	; 0x06
    142c:	00 97       	sbiw	r24, 0x00	; 0
    142e:	69 f7       	brne	.-38     	; 0x140a <LCD_vWriteCommand+0xd0>
    1430:	14 c0       	rjmp	.+40     	; 0x145a <LCD_vWriteCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1432:	6f 81       	ldd	r22, Y+7	; 0x07
    1434:	78 85       	ldd	r23, Y+8	; 0x08
    1436:	89 85       	ldd	r24, Y+9	; 0x09
    1438:	9a 85       	ldd	r25, Y+10	; 0x0a
    143a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    143e:	dc 01       	movw	r26, r24
    1440:	cb 01       	movw	r24, r22
    1442:	9e 83       	std	Y+6, r25	; 0x06
    1444:	8d 83       	std	Y+5, r24	; 0x05
    1446:	8d 81       	ldd	r24, Y+5	; 0x05
    1448:	9e 81       	ldd	r25, Y+6	; 0x06
    144a:	9a 83       	std	Y+2, r25	; 0x02
    144c:	89 83       	std	Y+1, r24	; 0x01
    144e:	89 81       	ldd	r24, Y+1	; 0x01
    1450:	9a 81       	ldd	r25, Y+2	; 0x02
    1452:	01 97       	sbiw	r24, 0x01	; 1
    1454:	f1 f7       	brne	.-4      	; 0x1452 <LCD_vWriteCommand+0x118>
    1456:	9a 83       	std	Y+2, r25	; 0x02
    1458:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_vSetPinValue(LCD_CONTROL_PORT,LCD_ENABLE,DIO_LOW);       //Sets  LCD_ENABLE to low
    145a:	82 e0       	ldi	r24, 0x02	; 2
    145c:	62 e0       	ldi	r22, 0x02	; 2
    145e:	40 e0       	ldi	r20, 0x00	; 0
    1460:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_vSetPinValue>

}
    1464:	2f 96       	adiw	r28, 0x0f	; 15
    1466:	0f b6       	in	r0, 0x3f	; 63
    1468:	f8 94       	cli
    146a:	de bf       	out	0x3e, r29	; 62
    146c:	0f be       	out	0x3f, r0	; 63
    146e:	cd bf       	out	0x3d, r28	; 61
    1470:	cf 91       	pop	r28
    1472:	df 91       	pop	r29
    1474:	08 95       	ret

00001476 <LCD_vDataPort>:

//This function set the direction of DATA port defined in the configuration file to output
void LCD_vDataPort(void)
{
    1476:	df 93       	push	r29
    1478:	cf 93       	push	r28
    147a:	cd b7       	in	r28, 0x3d	; 61
    147c:	de b7       	in	r29, 0x3e	; 62

	DIO_vSETPinDirection(LCD_DATA_PORT,LCD_D0,DIO_OUTPUT);
    147e:	80 e0       	ldi	r24, 0x00	; 0
    1480:	60 e0       	ldi	r22, 0x00	; 0
    1482:	41 e0       	ldi	r20, 0x01	; 1
    1484:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vSETPinDirection>
	DIO_vSETPinDirection(LCD_DATA_PORT,LCD_D1,DIO_OUTPUT);
    1488:	80 e0       	ldi	r24, 0x00	; 0
    148a:	61 e0       	ldi	r22, 0x01	; 1
    148c:	41 e0       	ldi	r20, 0x01	; 1
    148e:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vSETPinDirection>
	DIO_vSETPinDirection(LCD_DATA_PORT,LCD_D2,DIO_OUTPUT);
    1492:	80 e0       	ldi	r24, 0x00	; 0
    1494:	62 e0       	ldi	r22, 0x02	; 2
    1496:	41 e0       	ldi	r20, 0x01	; 1
    1498:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vSETPinDirection>
	DIO_vSETPinDirection(LCD_DATA_PORT,LCD_D3,DIO_OUTPUT);
    149c:	80 e0       	ldi	r24, 0x00	; 0
    149e:	63 e0       	ldi	r22, 0x03	; 3
    14a0:	41 e0       	ldi	r20, 0x01	; 1
    14a2:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vSETPinDirection>
	DIO_vSETPinDirection(LCD_DATA_PORT,LCD_D4,DIO_OUTPUT);
    14a6:	80 e0       	ldi	r24, 0x00	; 0
    14a8:	64 e0       	ldi	r22, 0x04	; 4
    14aa:	41 e0       	ldi	r20, 0x01	; 1
    14ac:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vSETPinDirection>
	DIO_vSETPinDirection(LCD_DATA_PORT,LCD_D5,DIO_OUTPUT);
    14b0:	80 e0       	ldi	r24, 0x00	; 0
    14b2:	65 e0       	ldi	r22, 0x05	; 5
    14b4:	41 e0       	ldi	r20, 0x01	; 1
    14b6:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vSETPinDirection>
	DIO_vSETPinDirection(LCD_DATA_PORT,LCD_D6,DIO_OUTPUT);
    14ba:	80 e0       	ldi	r24, 0x00	; 0
    14bc:	66 e0       	ldi	r22, 0x06	; 6
    14be:	41 e0       	ldi	r20, 0x01	; 1
    14c0:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vSETPinDirection>
	DIO_vSETPinDirection(LCD_DATA_PORT,LCD_D7,DIO_OUTPUT);
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	67 e0       	ldi	r22, 0x07	; 7
    14c8:	41 e0       	ldi	r20, 0x01	; 1
    14ca:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vSETPinDirection>


}
    14ce:	cf 91       	pop	r28
    14d0:	df 91       	pop	r29
    14d2:	08 95       	ret

000014d4 <LCD_vControlPort>:
//This function set the directions of control pins defined in the configuration file to output

void LCD_vControlPort(void)
{
    14d4:	df 93       	push	r29
    14d6:	cf 93       	push	r28
    14d8:	cd b7       	in	r28, 0x3d	; 61
    14da:	de b7       	in	r29, 0x3e	; 62

	DIO_vSETPinDirection(LCD_CONTROL_PORT,LCD_RS, DIO_HIGH);
    14dc:	82 e0       	ldi	r24, 0x02	; 2
    14de:	60 e0       	ldi	r22, 0x00	; 0
    14e0:	41 e0       	ldi	r20, 0x01	; 1
    14e2:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vSETPinDirection>
	DIO_vSETPinDirection(LCD_CONTROL_PORT,LCD_RW, DIO_HIGH);
    14e6:	82 e0       	ldi	r24, 0x02	; 2
    14e8:	61 e0       	ldi	r22, 0x01	; 1
    14ea:	41 e0       	ldi	r20, 0x01	; 1
    14ec:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vSETPinDirection>
	DIO_vSETPinDirection(LCD_CONTROL_PORT,LCD_ENABLE, DIO_HIGH);
    14f0:	82 e0       	ldi	r24, 0x02	; 2
    14f2:	62 e0       	ldi	r22, 0x02	; 2
    14f4:	41 e0       	ldi	r20, 0x01	; 1
    14f6:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vSETPinDirection>

}
    14fa:	cf 91       	pop	r28
    14fc:	df 91       	pop	r29
    14fe:	08 95       	ret

00001500 <Lcd_vInitialization>:

/*This function do all things to make LCD ready to accept data and commands
 * and it must be the first to call in main to make every thing works as needed*/
void Lcd_vInitialization (void)
{
    1500:	df 93       	push	r29
    1502:	cf 93       	push	r28
    1504:	cd b7       	in	r28, 0x3d	; 61
    1506:	de b7       	in	r29, 0x3e	; 62
    1508:	e8 97       	sbiw	r28, 0x38	; 56
    150a:	0f b6       	in	r0, 0x3f	; 63
    150c:	f8 94       	cli
    150e:	de bf       	out	0x3e, r29	; 62
    1510:	0f be       	out	0x3f, r0	; 63
    1512:	cd bf       	out	0x3d, r28	; 61
	LCD_vDataPort();
    1514:	0e 94 3b 0a 	call	0x1476	; 0x1476 <LCD_vDataPort>
	LCD_vControlPort();
    1518:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <LCD_vControlPort>
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	a8 ec       	ldi	r26, 0xC8	; 200
    1522:	b2 e4       	ldi	r27, 0x42	; 66
    1524:	8d ab       	std	Y+53, r24	; 0x35
    1526:	9e ab       	std	Y+54, r25	; 0x36
    1528:	af ab       	std	Y+55, r26	; 0x37
    152a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    152c:	6d a9       	ldd	r22, Y+53	; 0x35
    152e:	7e a9       	ldd	r23, Y+54	; 0x36
    1530:	8f a9       	ldd	r24, Y+55	; 0x37
    1532:	98 ad       	ldd	r25, Y+56	; 0x38
    1534:	20 e0       	ldi	r18, 0x00	; 0
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	4a ef       	ldi	r20, 0xFA	; 250
    153a:	54 e4       	ldi	r21, 0x44	; 68
    153c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1540:	dc 01       	movw	r26, r24
    1542:	cb 01       	movw	r24, r22
    1544:	89 ab       	std	Y+49, r24	; 0x31
    1546:	9a ab       	std	Y+50, r25	; 0x32
    1548:	ab ab       	std	Y+51, r26	; 0x33
    154a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    154c:	69 a9       	ldd	r22, Y+49	; 0x31
    154e:	7a a9       	ldd	r23, Y+50	; 0x32
    1550:	8b a9       	ldd	r24, Y+51	; 0x33
    1552:	9c a9       	ldd	r25, Y+52	; 0x34
    1554:	20 e0       	ldi	r18, 0x00	; 0
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	40 e8       	ldi	r20, 0x80	; 128
    155a:	5f e3       	ldi	r21, 0x3F	; 63
    155c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1560:	88 23       	and	r24, r24
    1562:	2c f4       	brge	.+10     	; 0x156e <Lcd_vInitialization+0x6e>
		__ticks = 1;
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	98 ab       	std	Y+48, r25	; 0x30
    156a:	8f a7       	std	Y+47, r24	; 0x2f
    156c:	3f c0       	rjmp	.+126    	; 0x15ec <Lcd_vInitialization+0xec>
	else if (__tmp > 65535)
    156e:	69 a9       	ldd	r22, Y+49	; 0x31
    1570:	7a a9       	ldd	r23, Y+50	; 0x32
    1572:	8b a9       	ldd	r24, Y+51	; 0x33
    1574:	9c a9       	ldd	r25, Y+52	; 0x34
    1576:	20 e0       	ldi	r18, 0x00	; 0
    1578:	3f ef       	ldi	r19, 0xFF	; 255
    157a:	4f e7       	ldi	r20, 0x7F	; 127
    157c:	57 e4       	ldi	r21, 0x47	; 71
    157e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1582:	18 16       	cp	r1, r24
    1584:	4c f5       	brge	.+82     	; 0x15d8 <Lcd_vInitialization+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1586:	6d a9       	ldd	r22, Y+53	; 0x35
    1588:	7e a9       	ldd	r23, Y+54	; 0x36
    158a:	8f a9       	ldd	r24, Y+55	; 0x37
    158c:	98 ad       	ldd	r25, Y+56	; 0x38
    158e:	20 e0       	ldi	r18, 0x00	; 0
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	40 e2       	ldi	r20, 0x20	; 32
    1594:	51 e4       	ldi	r21, 0x41	; 65
    1596:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    159a:	dc 01       	movw	r26, r24
    159c:	cb 01       	movw	r24, r22
    159e:	bc 01       	movw	r22, r24
    15a0:	cd 01       	movw	r24, r26
    15a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15a6:	dc 01       	movw	r26, r24
    15a8:	cb 01       	movw	r24, r22
    15aa:	98 ab       	std	Y+48, r25	; 0x30
    15ac:	8f a7       	std	Y+47, r24	; 0x2f
    15ae:	0f c0       	rjmp	.+30     	; 0x15ce <Lcd_vInitialization+0xce>
    15b0:	88 ec       	ldi	r24, 0xC8	; 200
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	9e a7       	std	Y+46, r25	; 0x2e
    15b6:	8d a7       	std	Y+45, r24	; 0x2d
    15b8:	8d a5       	ldd	r24, Y+45	; 0x2d
    15ba:	9e a5       	ldd	r25, Y+46	; 0x2e
    15bc:	01 97       	sbiw	r24, 0x01	; 1
    15be:	f1 f7       	brne	.-4      	; 0x15bc <Lcd_vInitialization+0xbc>
    15c0:	9e a7       	std	Y+46, r25	; 0x2e
    15c2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    15c6:	98 a9       	ldd	r25, Y+48	; 0x30
    15c8:	01 97       	sbiw	r24, 0x01	; 1
    15ca:	98 ab       	std	Y+48, r25	; 0x30
    15cc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    15d0:	98 a9       	ldd	r25, Y+48	; 0x30
    15d2:	00 97       	sbiw	r24, 0x00	; 0
    15d4:	69 f7       	brne	.-38     	; 0x15b0 <Lcd_vInitialization+0xb0>
    15d6:	14 c0       	rjmp	.+40     	; 0x1600 <Lcd_vInitialization+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15d8:	69 a9       	ldd	r22, Y+49	; 0x31
    15da:	7a a9       	ldd	r23, Y+50	; 0x32
    15dc:	8b a9       	ldd	r24, Y+51	; 0x33
    15de:	9c a9       	ldd	r25, Y+52	; 0x34
    15e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15e4:	dc 01       	movw	r26, r24
    15e6:	cb 01       	movw	r24, r22
    15e8:	98 ab       	std	Y+48, r25	; 0x30
    15ea:	8f a7       	std	Y+47, r24	; 0x2f
    15ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    15ee:	98 a9       	ldd	r25, Y+48	; 0x30
    15f0:	9c a7       	std	Y+44, r25	; 0x2c
    15f2:	8b a7       	std	Y+43, r24	; 0x2b
    15f4:	8b a5       	ldd	r24, Y+43	; 0x2b
    15f6:	9c a5       	ldd	r25, Y+44	; 0x2c
    15f8:	01 97       	sbiw	r24, 0x01	; 1
    15fa:	f1 f7       	brne	.-4      	; 0x15f8 <Lcd_vInitialization+0xf8>
    15fc:	9c a7       	std	Y+44, r25	; 0x2c
    15fe:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(100);
	LCD_vWriteCommand(0b00111100);
    1600:	8c e3       	ldi	r24, 0x3C	; 60
    1602:	0e 94 9d 09 	call	0x133a	; 0x133a <LCD_vWriteCommand>
    1606:	80 e0       	ldi	r24, 0x00	; 0
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	a0 e0       	ldi	r26, 0x00	; 0
    160c:	b0 e4       	ldi	r27, 0x40	; 64
    160e:	8f a3       	std	Y+39, r24	; 0x27
    1610:	98 a7       	std	Y+40, r25	; 0x28
    1612:	a9 a7       	std	Y+41, r26	; 0x29
    1614:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1616:	6f a1       	ldd	r22, Y+39	; 0x27
    1618:	78 a5       	ldd	r23, Y+40	; 0x28
    161a:	89 a5       	ldd	r24, Y+41	; 0x29
    161c:	9a a5       	ldd	r25, Y+42	; 0x2a
    161e:	20 e0       	ldi	r18, 0x00	; 0
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	4a ef       	ldi	r20, 0xFA	; 250
    1624:	54 e4       	ldi	r21, 0x44	; 68
    1626:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    162a:	dc 01       	movw	r26, r24
    162c:	cb 01       	movw	r24, r22
    162e:	8b a3       	std	Y+35, r24	; 0x23
    1630:	9c a3       	std	Y+36, r25	; 0x24
    1632:	ad a3       	std	Y+37, r26	; 0x25
    1634:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1636:	6b a1       	ldd	r22, Y+35	; 0x23
    1638:	7c a1       	ldd	r23, Y+36	; 0x24
    163a:	8d a1       	ldd	r24, Y+37	; 0x25
    163c:	9e a1       	ldd	r25, Y+38	; 0x26
    163e:	20 e0       	ldi	r18, 0x00	; 0
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	40 e8       	ldi	r20, 0x80	; 128
    1644:	5f e3       	ldi	r21, 0x3F	; 63
    1646:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    164a:	88 23       	and	r24, r24
    164c:	2c f4       	brge	.+10     	; 0x1658 <Lcd_vInitialization+0x158>
		__ticks = 1;
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	9a a3       	std	Y+34, r25	; 0x22
    1654:	89 a3       	std	Y+33, r24	; 0x21
    1656:	3f c0       	rjmp	.+126    	; 0x16d6 <Lcd_vInitialization+0x1d6>
	else if (__tmp > 65535)
    1658:	6b a1       	ldd	r22, Y+35	; 0x23
    165a:	7c a1       	ldd	r23, Y+36	; 0x24
    165c:	8d a1       	ldd	r24, Y+37	; 0x25
    165e:	9e a1       	ldd	r25, Y+38	; 0x26
    1660:	20 e0       	ldi	r18, 0x00	; 0
    1662:	3f ef       	ldi	r19, 0xFF	; 255
    1664:	4f e7       	ldi	r20, 0x7F	; 127
    1666:	57 e4       	ldi	r21, 0x47	; 71
    1668:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    166c:	18 16       	cp	r1, r24
    166e:	4c f5       	brge	.+82     	; 0x16c2 <Lcd_vInitialization+0x1c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1670:	6f a1       	ldd	r22, Y+39	; 0x27
    1672:	78 a5       	ldd	r23, Y+40	; 0x28
    1674:	89 a5       	ldd	r24, Y+41	; 0x29
    1676:	9a a5       	ldd	r25, Y+42	; 0x2a
    1678:	20 e0       	ldi	r18, 0x00	; 0
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	40 e2       	ldi	r20, 0x20	; 32
    167e:	51 e4       	ldi	r21, 0x41	; 65
    1680:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1684:	dc 01       	movw	r26, r24
    1686:	cb 01       	movw	r24, r22
    1688:	bc 01       	movw	r22, r24
    168a:	cd 01       	movw	r24, r26
    168c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1690:	dc 01       	movw	r26, r24
    1692:	cb 01       	movw	r24, r22
    1694:	9a a3       	std	Y+34, r25	; 0x22
    1696:	89 a3       	std	Y+33, r24	; 0x21
    1698:	0f c0       	rjmp	.+30     	; 0x16b8 <Lcd_vInitialization+0x1b8>
    169a:	88 ec       	ldi	r24, 0xC8	; 200
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	98 a3       	std	Y+32, r25	; 0x20
    16a0:	8f 8f       	std	Y+31, r24	; 0x1f
    16a2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    16a4:	98 a1       	ldd	r25, Y+32	; 0x20
    16a6:	01 97       	sbiw	r24, 0x01	; 1
    16a8:	f1 f7       	brne	.-4      	; 0x16a6 <Lcd_vInitialization+0x1a6>
    16aa:	98 a3       	std	Y+32, r25	; 0x20
    16ac:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16ae:	89 a1       	ldd	r24, Y+33	; 0x21
    16b0:	9a a1       	ldd	r25, Y+34	; 0x22
    16b2:	01 97       	sbiw	r24, 0x01	; 1
    16b4:	9a a3       	std	Y+34, r25	; 0x22
    16b6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16b8:	89 a1       	ldd	r24, Y+33	; 0x21
    16ba:	9a a1       	ldd	r25, Y+34	; 0x22
    16bc:	00 97       	sbiw	r24, 0x00	; 0
    16be:	69 f7       	brne	.-38     	; 0x169a <Lcd_vInitialization+0x19a>
    16c0:	14 c0       	rjmp	.+40     	; 0x16ea <Lcd_vInitialization+0x1ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16c2:	6b a1       	ldd	r22, Y+35	; 0x23
    16c4:	7c a1       	ldd	r23, Y+36	; 0x24
    16c6:	8d a1       	ldd	r24, Y+37	; 0x25
    16c8:	9e a1       	ldd	r25, Y+38	; 0x26
    16ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16ce:	dc 01       	movw	r26, r24
    16d0:	cb 01       	movw	r24, r22
    16d2:	9a a3       	std	Y+34, r25	; 0x22
    16d4:	89 a3       	std	Y+33, r24	; 0x21
    16d6:	89 a1       	ldd	r24, Y+33	; 0x21
    16d8:	9a a1       	ldd	r25, Y+34	; 0x22
    16da:	9e 8f       	std	Y+30, r25	; 0x1e
    16dc:	8d 8f       	std	Y+29, r24	; 0x1d
    16de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16e0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16e2:	01 97       	sbiw	r24, 0x01	; 1
    16e4:	f1 f7       	brne	.-4      	; 0x16e2 <Lcd_vInitialization+0x1e2>
    16e6:	9e 8f       	std	Y+30, r25	; 0x1e
    16e8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	LCD_vWriteCommand(0b00001111);
    16ea:	8f e0       	ldi	r24, 0x0F	; 15
    16ec:	0e 94 9d 09 	call	0x133a	; 0x133a <LCD_vWriteCommand>
    16f0:	80 e0       	ldi	r24, 0x00	; 0
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	a0 e0       	ldi	r26, 0x00	; 0
    16f6:	b0 e4       	ldi	r27, 0x40	; 64
    16f8:	89 8f       	std	Y+25, r24	; 0x19
    16fa:	9a 8f       	std	Y+26, r25	; 0x1a
    16fc:	ab 8f       	std	Y+27, r26	; 0x1b
    16fe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1700:	69 8d       	ldd	r22, Y+25	; 0x19
    1702:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1704:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1706:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1708:	20 e0       	ldi	r18, 0x00	; 0
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	4a ef       	ldi	r20, 0xFA	; 250
    170e:	54 e4       	ldi	r21, 0x44	; 68
    1710:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1714:	dc 01       	movw	r26, r24
    1716:	cb 01       	movw	r24, r22
    1718:	8d 8b       	std	Y+21, r24	; 0x15
    171a:	9e 8b       	std	Y+22, r25	; 0x16
    171c:	af 8b       	std	Y+23, r26	; 0x17
    171e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1720:	6d 89       	ldd	r22, Y+21	; 0x15
    1722:	7e 89       	ldd	r23, Y+22	; 0x16
    1724:	8f 89       	ldd	r24, Y+23	; 0x17
    1726:	98 8d       	ldd	r25, Y+24	; 0x18
    1728:	20 e0       	ldi	r18, 0x00	; 0
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	40 e8       	ldi	r20, 0x80	; 128
    172e:	5f e3       	ldi	r21, 0x3F	; 63
    1730:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1734:	88 23       	and	r24, r24
    1736:	2c f4       	brge	.+10     	; 0x1742 <Lcd_vInitialization+0x242>
		__ticks = 1;
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	9c 8b       	std	Y+20, r25	; 0x14
    173e:	8b 8b       	std	Y+19, r24	; 0x13
    1740:	3f c0       	rjmp	.+126    	; 0x17c0 <Lcd_vInitialization+0x2c0>
	else if (__tmp > 65535)
    1742:	6d 89       	ldd	r22, Y+21	; 0x15
    1744:	7e 89       	ldd	r23, Y+22	; 0x16
    1746:	8f 89       	ldd	r24, Y+23	; 0x17
    1748:	98 8d       	ldd	r25, Y+24	; 0x18
    174a:	20 e0       	ldi	r18, 0x00	; 0
    174c:	3f ef       	ldi	r19, 0xFF	; 255
    174e:	4f e7       	ldi	r20, 0x7F	; 127
    1750:	57 e4       	ldi	r21, 0x47	; 71
    1752:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1756:	18 16       	cp	r1, r24
    1758:	4c f5       	brge	.+82     	; 0x17ac <Lcd_vInitialization+0x2ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    175a:	69 8d       	ldd	r22, Y+25	; 0x19
    175c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    175e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1760:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1762:	20 e0       	ldi	r18, 0x00	; 0
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	40 e2       	ldi	r20, 0x20	; 32
    1768:	51 e4       	ldi	r21, 0x41	; 65
    176a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    176e:	dc 01       	movw	r26, r24
    1770:	cb 01       	movw	r24, r22
    1772:	bc 01       	movw	r22, r24
    1774:	cd 01       	movw	r24, r26
    1776:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    177a:	dc 01       	movw	r26, r24
    177c:	cb 01       	movw	r24, r22
    177e:	9c 8b       	std	Y+20, r25	; 0x14
    1780:	8b 8b       	std	Y+19, r24	; 0x13
    1782:	0f c0       	rjmp	.+30     	; 0x17a2 <Lcd_vInitialization+0x2a2>
    1784:	88 ec       	ldi	r24, 0xC8	; 200
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	9a 8b       	std	Y+18, r25	; 0x12
    178a:	89 8b       	std	Y+17, r24	; 0x11
    178c:	89 89       	ldd	r24, Y+17	; 0x11
    178e:	9a 89       	ldd	r25, Y+18	; 0x12
    1790:	01 97       	sbiw	r24, 0x01	; 1
    1792:	f1 f7       	brne	.-4      	; 0x1790 <Lcd_vInitialization+0x290>
    1794:	9a 8b       	std	Y+18, r25	; 0x12
    1796:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1798:	8b 89       	ldd	r24, Y+19	; 0x13
    179a:	9c 89       	ldd	r25, Y+20	; 0x14
    179c:	01 97       	sbiw	r24, 0x01	; 1
    179e:	9c 8b       	std	Y+20, r25	; 0x14
    17a0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17a2:	8b 89       	ldd	r24, Y+19	; 0x13
    17a4:	9c 89       	ldd	r25, Y+20	; 0x14
    17a6:	00 97       	sbiw	r24, 0x00	; 0
    17a8:	69 f7       	brne	.-38     	; 0x1784 <Lcd_vInitialization+0x284>
    17aa:	14 c0       	rjmp	.+40     	; 0x17d4 <Lcd_vInitialization+0x2d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ac:	6d 89       	ldd	r22, Y+21	; 0x15
    17ae:	7e 89       	ldd	r23, Y+22	; 0x16
    17b0:	8f 89       	ldd	r24, Y+23	; 0x17
    17b2:	98 8d       	ldd	r25, Y+24	; 0x18
    17b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17b8:	dc 01       	movw	r26, r24
    17ba:	cb 01       	movw	r24, r22
    17bc:	9c 8b       	std	Y+20, r25	; 0x14
    17be:	8b 8b       	std	Y+19, r24	; 0x13
    17c0:	8b 89       	ldd	r24, Y+19	; 0x13
    17c2:	9c 89       	ldd	r25, Y+20	; 0x14
    17c4:	98 8b       	std	Y+16, r25	; 0x10
    17c6:	8f 87       	std	Y+15, r24	; 0x0f
    17c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    17ca:	98 89       	ldd	r25, Y+16	; 0x10
    17cc:	01 97       	sbiw	r24, 0x01	; 1
    17ce:	f1 f7       	brne	.-4      	; 0x17cc <Lcd_vInitialization+0x2cc>
    17d0:	98 8b       	std	Y+16, r25	; 0x10
    17d2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_vWriteCommand(0b00000001);
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	0e 94 9d 09 	call	0x133a	; 0x133a <LCD_vWriteCommand>
    17da:	80 e0       	ldi	r24, 0x00	; 0
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	a0 e0       	ldi	r26, 0x00	; 0
    17e0:	b0 e4       	ldi	r27, 0x40	; 64
    17e2:	8b 87       	std	Y+11, r24	; 0x0b
    17e4:	9c 87       	std	Y+12, r25	; 0x0c
    17e6:	ad 87       	std	Y+13, r26	; 0x0d
    17e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    17ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    17ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    17f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	4a ef       	ldi	r20, 0xFA	; 250
    17f8:	54 e4       	ldi	r21, 0x44	; 68
    17fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17fe:	dc 01       	movw	r26, r24
    1800:	cb 01       	movw	r24, r22
    1802:	8f 83       	std	Y+7, r24	; 0x07
    1804:	98 87       	std	Y+8, r25	; 0x08
    1806:	a9 87       	std	Y+9, r26	; 0x09
    1808:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    180a:	6f 81       	ldd	r22, Y+7	; 0x07
    180c:	78 85       	ldd	r23, Y+8	; 0x08
    180e:	89 85       	ldd	r24, Y+9	; 0x09
    1810:	9a 85       	ldd	r25, Y+10	; 0x0a
    1812:	20 e0       	ldi	r18, 0x00	; 0
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	40 e8       	ldi	r20, 0x80	; 128
    1818:	5f e3       	ldi	r21, 0x3F	; 63
    181a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    181e:	88 23       	and	r24, r24
    1820:	2c f4       	brge	.+10     	; 0x182c <Lcd_vInitialization+0x32c>
		__ticks = 1;
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	9e 83       	std	Y+6, r25	; 0x06
    1828:	8d 83       	std	Y+5, r24	; 0x05
    182a:	3f c0       	rjmp	.+126    	; 0x18aa <Lcd_vInitialization+0x3aa>
	else if (__tmp > 65535)
    182c:	6f 81       	ldd	r22, Y+7	; 0x07
    182e:	78 85       	ldd	r23, Y+8	; 0x08
    1830:	89 85       	ldd	r24, Y+9	; 0x09
    1832:	9a 85       	ldd	r25, Y+10	; 0x0a
    1834:	20 e0       	ldi	r18, 0x00	; 0
    1836:	3f ef       	ldi	r19, 0xFF	; 255
    1838:	4f e7       	ldi	r20, 0x7F	; 127
    183a:	57 e4       	ldi	r21, 0x47	; 71
    183c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1840:	18 16       	cp	r1, r24
    1842:	4c f5       	brge	.+82     	; 0x1896 <Lcd_vInitialization+0x396>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1844:	6b 85       	ldd	r22, Y+11	; 0x0b
    1846:	7c 85       	ldd	r23, Y+12	; 0x0c
    1848:	8d 85       	ldd	r24, Y+13	; 0x0d
    184a:	9e 85       	ldd	r25, Y+14	; 0x0e
    184c:	20 e0       	ldi	r18, 0x00	; 0
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	40 e2       	ldi	r20, 0x20	; 32
    1852:	51 e4       	ldi	r21, 0x41	; 65
    1854:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1858:	dc 01       	movw	r26, r24
    185a:	cb 01       	movw	r24, r22
    185c:	bc 01       	movw	r22, r24
    185e:	cd 01       	movw	r24, r26
    1860:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1864:	dc 01       	movw	r26, r24
    1866:	cb 01       	movw	r24, r22
    1868:	9e 83       	std	Y+6, r25	; 0x06
    186a:	8d 83       	std	Y+5, r24	; 0x05
    186c:	0f c0       	rjmp	.+30     	; 0x188c <Lcd_vInitialization+0x38c>
    186e:	88 ec       	ldi	r24, 0xC8	; 200
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	9c 83       	std	Y+4, r25	; 0x04
    1874:	8b 83       	std	Y+3, r24	; 0x03
    1876:	8b 81       	ldd	r24, Y+3	; 0x03
    1878:	9c 81       	ldd	r25, Y+4	; 0x04
    187a:	01 97       	sbiw	r24, 0x01	; 1
    187c:	f1 f7       	brne	.-4      	; 0x187a <Lcd_vInitialization+0x37a>
    187e:	9c 83       	std	Y+4, r25	; 0x04
    1880:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1882:	8d 81       	ldd	r24, Y+5	; 0x05
    1884:	9e 81       	ldd	r25, Y+6	; 0x06
    1886:	01 97       	sbiw	r24, 0x01	; 1
    1888:	9e 83       	std	Y+6, r25	; 0x06
    188a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    188c:	8d 81       	ldd	r24, Y+5	; 0x05
    188e:	9e 81       	ldd	r25, Y+6	; 0x06
    1890:	00 97       	sbiw	r24, 0x00	; 0
    1892:	69 f7       	brne	.-38     	; 0x186e <Lcd_vInitialization+0x36e>
    1894:	14 c0       	rjmp	.+40     	; 0x18be <Lcd_vInitialization+0x3be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1896:	6f 81       	ldd	r22, Y+7	; 0x07
    1898:	78 85       	ldd	r23, Y+8	; 0x08
    189a:	89 85       	ldd	r24, Y+9	; 0x09
    189c:	9a 85       	ldd	r25, Y+10	; 0x0a
    189e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18a2:	dc 01       	movw	r26, r24
    18a4:	cb 01       	movw	r24, r22
    18a6:	9e 83       	std	Y+6, r25	; 0x06
    18a8:	8d 83       	std	Y+5, r24	; 0x05
    18aa:	8d 81       	ldd	r24, Y+5	; 0x05
    18ac:	9e 81       	ldd	r25, Y+6	; 0x06
    18ae:	9a 83       	std	Y+2, r25	; 0x02
    18b0:	89 83       	std	Y+1, r24	; 0x01
    18b2:	89 81       	ldd	r24, Y+1	; 0x01
    18b4:	9a 81       	ldd	r25, Y+2	; 0x02
    18b6:	01 97       	sbiw	r24, 0x01	; 1
    18b8:	f1 f7       	brne	.-4      	; 0x18b6 <Lcd_vInitialization+0x3b6>
    18ba:	9a 83       	std	Y+2, r25	; 0x02
    18bc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    18be:	e8 96       	adiw	r28, 0x38	; 56
    18c0:	0f b6       	in	r0, 0x3f	; 63
    18c2:	f8 94       	cli
    18c4:	de bf       	out	0x3e, r29	; 62
    18c6:	0f be       	out	0x3f, r0	; 63
    18c8:	cd bf       	out	0x3d, r28	; 61
    18ca:	cf 91       	pop	r28
    18cc:	df 91       	pop	r29
    18ce:	08 95       	ret

000018d0 <LCD_vClear>:

//This function clears the display
void LCD_vClear(void)
{
    18d0:	df 93       	push	r29
    18d2:	cf 93       	push	r28
    18d4:	cd b7       	in	r28, 0x3d	; 61
    18d6:	de b7       	in	r29, 0x3e	; 62
    18d8:	2e 97       	sbiw	r28, 0x0e	; 14
    18da:	0f b6       	in	r0, 0x3f	; 63
    18dc:	f8 94       	cli
    18de:	de bf       	out	0x3e, r29	; 62
    18e0:	0f be       	out	0x3f, r0	; 63
    18e2:	cd bf       	out	0x3d, r28	; 61
	LCD_vWriteCommand(0b00000001);
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	0e 94 9d 09 	call	0x133a	; 0x133a <LCD_vWriteCommand>
    18ea:	80 e0       	ldi	r24, 0x00	; 0
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	a0 e2       	ldi	r26, 0x20	; 32
    18f0:	b1 e4       	ldi	r27, 0x41	; 65
    18f2:	8b 87       	std	Y+11, r24	; 0x0b
    18f4:	9c 87       	std	Y+12, r25	; 0x0c
    18f6:	ad 87       	std	Y+13, r26	; 0x0d
    18f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    18fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    18fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1900:	9e 85       	ldd	r25, Y+14	; 0x0e
    1902:	20 e0       	ldi	r18, 0x00	; 0
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	4a ef       	ldi	r20, 0xFA	; 250
    1908:	54 e4       	ldi	r21, 0x44	; 68
    190a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    190e:	dc 01       	movw	r26, r24
    1910:	cb 01       	movw	r24, r22
    1912:	8f 83       	std	Y+7, r24	; 0x07
    1914:	98 87       	std	Y+8, r25	; 0x08
    1916:	a9 87       	std	Y+9, r26	; 0x09
    1918:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    191a:	6f 81       	ldd	r22, Y+7	; 0x07
    191c:	78 85       	ldd	r23, Y+8	; 0x08
    191e:	89 85       	ldd	r24, Y+9	; 0x09
    1920:	9a 85       	ldd	r25, Y+10	; 0x0a
    1922:	20 e0       	ldi	r18, 0x00	; 0
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	40 e8       	ldi	r20, 0x80	; 128
    1928:	5f e3       	ldi	r21, 0x3F	; 63
    192a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    192e:	88 23       	and	r24, r24
    1930:	2c f4       	brge	.+10     	; 0x193c <LCD_vClear+0x6c>
		__ticks = 1;
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	9e 83       	std	Y+6, r25	; 0x06
    1938:	8d 83       	std	Y+5, r24	; 0x05
    193a:	3f c0       	rjmp	.+126    	; 0x19ba <LCD_vClear+0xea>
	else if (__tmp > 65535)
    193c:	6f 81       	ldd	r22, Y+7	; 0x07
    193e:	78 85       	ldd	r23, Y+8	; 0x08
    1940:	89 85       	ldd	r24, Y+9	; 0x09
    1942:	9a 85       	ldd	r25, Y+10	; 0x0a
    1944:	20 e0       	ldi	r18, 0x00	; 0
    1946:	3f ef       	ldi	r19, 0xFF	; 255
    1948:	4f e7       	ldi	r20, 0x7F	; 127
    194a:	57 e4       	ldi	r21, 0x47	; 71
    194c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1950:	18 16       	cp	r1, r24
    1952:	4c f5       	brge	.+82     	; 0x19a6 <LCD_vClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1954:	6b 85       	ldd	r22, Y+11	; 0x0b
    1956:	7c 85       	ldd	r23, Y+12	; 0x0c
    1958:	8d 85       	ldd	r24, Y+13	; 0x0d
    195a:	9e 85       	ldd	r25, Y+14	; 0x0e
    195c:	20 e0       	ldi	r18, 0x00	; 0
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	40 e2       	ldi	r20, 0x20	; 32
    1962:	51 e4       	ldi	r21, 0x41	; 65
    1964:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1968:	dc 01       	movw	r26, r24
    196a:	cb 01       	movw	r24, r22
    196c:	bc 01       	movw	r22, r24
    196e:	cd 01       	movw	r24, r26
    1970:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1974:	dc 01       	movw	r26, r24
    1976:	cb 01       	movw	r24, r22
    1978:	9e 83       	std	Y+6, r25	; 0x06
    197a:	8d 83       	std	Y+5, r24	; 0x05
    197c:	0f c0       	rjmp	.+30     	; 0x199c <LCD_vClear+0xcc>
    197e:	88 ec       	ldi	r24, 0xC8	; 200
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	9c 83       	std	Y+4, r25	; 0x04
    1984:	8b 83       	std	Y+3, r24	; 0x03
    1986:	8b 81       	ldd	r24, Y+3	; 0x03
    1988:	9c 81       	ldd	r25, Y+4	; 0x04
    198a:	01 97       	sbiw	r24, 0x01	; 1
    198c:	f1 f7       	brne	.-4      	; 0x198a <LCD_vClear+0xba>
    198e:	9c 83       	std	Y+4, r25	; 0x04
    1990:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1992:	8d 81       	ldd	r24, Y+5	; 0x05
    1994:	9e 81       	ldd	r25, Y+6	; 0x06
    1996:	01 97       	sbiw	r24, 0x01	; 1
    1998:	9e 83       	std	Y+6, r25	; 0x06
    199a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    199c:	8d 81       	ldd	r24, Y+5	; 0x05
    199e:	9e 81       	ldd	r25, Y+6	; 0x06
    19a0:	00 97       	sbiw	r24, 0x00	; 0
    19a2:	69 f7       	brne	.-38     	; 0x197e <LCD_vClear+0xae>
    19a4:	14 c0       	rjmp	.+40     	; 0x19ce <LCD_vClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19a6:	6f 81       	ldd	r22, Y+7	; 0x07
    19a8:	78 85       	ldd	r23, Y+8	; 0x08
    19aa:	89 85       	ldd	r24, Y+9	; 0x09
    19ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19b2:	dc 01       	movw	r26, r24
    19b4:	cb 01       	movw	r24, r22
    19b6:	9e 83       	std	Y+6, r25	; 0x06
    19b8:	8d 83       	std	Y+5, r24	; 0x05
    19ba:	8d 81       	ldd	r24, Y+5	; 0x05
    19bc:	9e 81       	ldd	r25, Y+6	; 0x06
    19be:	9a 83       	std	Y+2, r25	; 0x02
    19c0:	89 83       	std	Y+1, r24	; 0x01
    19c2:	89 81       	ldd	r24, Y+1	; 0x01
    19c4:	9a 81       	ldd	r25, Y+2	; 0x02
    19c6:	01 97       	sbiw	r24, 0x01	; 1
    19c8:	f1 f7       	brne	.-4      	; 0x19c6 <LCD_vClear+0xf6>
    19ca:	9a 83       	std	Y+2, r25	; 0x02
    19cc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    19ce:	2e 96       	adiw	r28, 0x0e	; 14
    19d0:	0f b6       	in	r0, 0x3f	; 63
    19d2:	f8 94       	cli
    19d4:	de bf       	out	0x3e, r29	; 62
    19d6:	0f be       	out	0x3f, r0	; 63
    19d8:	cd bf       	out	0x3d, r28	; 61
    19da:	cf 91       	pop	r28
    19dc:	df 91       	pop	r29
    19de:	08 95       	ret

000019e0 <LCD_vPosition>:

//This function moves the cursor to the specified location from 1 to 32

void LCD_vPosition(u8 position)
{
    19e0:	df 93       	push	r29
    19e2:	cf 93       	push	r28
    19e4:	cd b7       	in	r28, 0x3d	; 61
    19e6:	de b7       	in	r29, 0x3e	; 62
    19e8:	2f 97       	sbiw	r28, 0x0f	; 15
    19ea:	0f b6       	in	r0, 0x3f	; 63
    19ec:	f8 94       	cli
    19ee:	de bf       	out	0x3e, r29	; 62
    19f0:	0f be       	out	0x3f, r0	; 63
    19f2:	cd bf       	out	0x3d, r28	; 61
    19f4:	8f 87       	std	Y+15, r24	; 0x0f
	if (position > 16)
    19f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    19f8:	81 31       	cpi	r24, 0x11	; 17
    19fa:	28 f0       	brcs	.+10     	; 0x1a06 <LCD_vPosition+0x26>
		LCD_vWriteCommand((175 +position));
    19fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    19fe:	81 55       	subi	r24, 0x51	; 81
    1a00:	0e 94 9d 09 	call	0x133a	; 0x133a <LCD_vWriteCommand>
    1a04:	04 c0       	rjmp	.+8      	; 0x1a0e <LCD_vPosition+0x2e>
	else
		LCD_vWriteCommand((127+position));
    1a06:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a08:	81 58       	subi	r24, 0x81	; 129
    1a0a:	0e 94 9d 09 	call	0x133a	; 0x133a <LCD_vWriteCommand>
    1a0e:	80 e0       	ldi	r24, 0x00	; 0
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	a0 e2       	ldi	r26, 0x20	; 32
    1a14:	b1 e4       	ldi	r27, 0x41	; 65
    1a16:	8b 87       	std	Y+11, r24	; 0x0b
    1a18:	9c 87       	std	Y+12, r25	; 0x0c
    1a1a:	ad 87       	std	Y+13, r26	; 0x0d
    1a1c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a20:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a22:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a24:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	4a ef       	ldi	r20, 0xFA	; 250
    1a2c:	54 e4       	ldi	r21, 0x44	; 68
    1a2e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a32:	dc 01       	movw	r26, r24
    1a34:	cb 01       	movw	r24, r22
    1a36:	8f 83       	std	Y+7, r24	; 0x07
    1a38:	98 87       	std	Y+8, r25	; 0x08
    1a3a:	a9 87       	std	Y+9, r26	; 0x09
    1a3c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a40:	78 85       	ldd	r23, Y+8	; 0x08
    1a42:	89 85       	ldd	r24, Y+9	; 0x09
    1a44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	40 e8       	ldi	r20, 0x80	; 128
    1a4c:	5f e3       	ldi	r21, 0x3F	; 63
    1a4e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a52:	88 23       	and	r24, r24
    1a54:	2c f4       	brge	.+10     	; 0x1a60 <LCD_vPosition+0x80>
		__ticks = 1;
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	9e 83       	std	Y+6, r25	; 0x06
    1a5c:	8d 83       	std	Y+5, r24	; 0x05
    1a5e:	3f c0       	rjmp	.+126    	; 0x1ade <LCD_vPosition+0xfe>
	else if (__tmp > 65535)
    1a60:	6f 81       	ldd	r22, Y+7	; 0x07
    1a62:	78 85       	ldd	r23, Y+8	; 0x08
    1a64:	89 85       	ldd	r24, Y+9	; 0x09
    1a66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a68:	20 e0       	ldi	r18, 0x00	; 0
    1a6a:	3f ef       	ldi	r19, 0xFF	; 255
    1a6c:	4f e7       	ldi	r20, 0x7F	; 127
    1a6e:	57 e4       	ldi	r21, 0x47	; 71
    1a70:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a74:	18 16       	cp	r1, r24
    1a76:	4c f5       	brge	.+82     	; 0x1aca <LCD_vPosition+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a78:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a80:	20 e0       	ldi	r18, 0x00	; 0
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	40 e2       	ldi	r20, 0x20	; 32
    1a86:	51 e4       	ldi	r21, 0x41	; 65
    1a88:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a8c:	dc 01       	movw	r26, r24
    1a8e:	cb 01       	movw	r24, r22
    1a90:	bc 01       	movw	r22, r24
    1a92:	cd 01       	movw	r24, r26
    1a94:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a98:	dc 01       	movw	r26, r24
    1a9a:	cb 01       	movw	r24, r22
    1a9c:	9e 83       	std	Y+6, r25	; 0x06
    1a9e:	8d 83       	std	Y+5, r24	; 0x05
    1aa0:	0f c0       	rjmp	.+30     	; 0x1ac0 <LCD_vPosition+0xe0>
    1aa2:	88 ec       	ldi	r24, 0xC8	; 200
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	9c 83       	std	Y+4, r25	; 0x04
    1aa8:	8b 83       	std	Y+3, r24	; 0x03
    1aaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1aac:	9c 81       	ldd	r25, Y+4	; 0x04
    1aae:	01 97       	sbiw	r24, 0x01	; 1
    1ab0:	f1 f7       	brne	.-4      	; 0x1aae <LCD_vPosition+0xce>
    1ab2:	9c 83       	std	Y+4, r25	; 0x04
    1ab4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ab6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab8:	9e 81       	ldd	r25, Y+6	; 0x06
    1aba:	01 97       	sbiw	r24, 0x01	; 1
    1abc:	9e 83       	std	Y+6, r25	; 0x06
    1abe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ac0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac4:	00 97       	sbiw	r24, 0x00	; 0
    1ac6:	69 f7       	brne	.-38     	; 0x1aa2 <LCD_vPosition+0xc2>
    1ac8:	14 c0       	rjmp	.+40     	; 0x1af2 <LCD_vPosition+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aca:	6f 81       	ldd	r22, Y+7	; 0x07
    1acc:	78 85       	ldd	r23, Y+8	; 0x08
    1ace:	89 85       	ldd	r24, Y+9	; 0x09
    1ad0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	cb 01       	movw	r24, r22
    1ada:	9e 83       	std	Y+6, r25	; 0x06
    1adc:	8d 83       	std	Y+5, r24	; 0x05
    1ade:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae2:	9a 83       	std	Y+2, r25	; 0x02
    1ae4:	89 83       	std	Y+1, r24	; 0x01
    1ae6:	89 81       	ldd	r24, Y+1	; 0x01
    1ae8:	9a 81       	ldd	r25, Y+2	; 0x02
    1aea:	01 97       	sbiw	r24, 0x01	; 1
    1aec:	f1 f7       	brne	.-4      	; 0x1aea <LCD_vPosition+0x10a>
    1aee:	9a 83       	std	Y+2, r25	; 0x02
    1af0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    1af2:	2f 96       	adiw	r28, 0x0f	; 15
    1af4:	0f b6       	in	r0, 0x3f	; 63
    1af6:	f8 94       	cli
    1af8:	de bf       	out	0x3e, r29	; 62
    1afa:	0f be       	out	0x3f, r0	; 63
    1afc:	cd bf       	out	0x3d, r28	; 61
    1afe:	cf 91       	pop	r28
    1b00:	df 91       	pop	r29
    1b02:	08 95       	ret

00001b04 <LCD_vCursorHome>:


//This function moves the cursor 1st position
void LCD_vCursorHome(void)
{
    1b04:	df 93       	push	r29
    1b06:	cf 93       	push	r28
    1b08:	cd b7       	in	r28, 0x3d	; 61
    1b0a:	de b7       	in	r29, 0x3e	; 62
	LCD_vWriteCommand(0b00000010);
    1b0c:	82 e0       	ldi	r24, 0x02	; 2
    1b0e:	0e 94 9d 09 	call	0x133a	; 0x133a <LCD_vWriteCommand>
}
    1b12:	cf 91       	pop	r28
    1b14:	df 91       	pop	r29
    1b16:	08 95       	ret

00001b18 <LCD_vDisplayRshift>:


//This function shifts the display to right
void LCD_vDisplayRshift(void)
{
    1b18:	df 93       	push	r29
    1b1a:	cf 93       	push	r28
    1b1c:	cd b7       	in	r28, 0x3d	; 61
    1b1e:	de b7       	in	r29, 0x3e	; 62
	LCD_vWriteCommand(0b00011100);
    1b20:	8c e1       	ldi	r24, 0x1C	; 28
    1b22:	0e 94 9d 09 	call	0x133a	; 0x133a <LCD_vWriteCommand>
}
    1b26:	cf 91       	pop	r28
    1b28:	df 91       	pop	r29
    1b2a:	08 95       	ret

00001b2c <LCD_vDisplayLshift>:

//This function shifts the display to left
void LCD_vDisplayLshift(void)
{
    1b2c:	df 93       	push	r29
    1b2e:	cf 93       	push	r28
    1b30:	cd b7       	in	r28, 0x3d	; 61
    1b32:	de b7       	in	r29, 0x3e	; 62
	LCD_vWriteCommand(0b00011000);
    1b34:	88 e1       	ldi	r24, 0x18	; 24
    1b36:	0e 94 9d 09 	call	0x133a	; 0x133a <LCD_vWriteCommand>
}
    1b3a:	cf 91       	pop	r28
    1b3c:	df 91       	pop	r29
    1b3e:	08 95       	ret

00001b40 <Keypad_vInitialization>:
#include "DIO_Int.h"
#include <avr/io.h>
#include "Keypad_config.h"
//u8 Keypad_Array[4][4]={{'1','2','3','/'},{'4','5','6','-'},{'7','8','9','.'},{'+','0','*','='}};
u8 Keypad_Array[4][4]={{49,50,51,47},{52,53,54,45},{55,56,57,46},{43,48,42,61}};
void Keypad_vInitialization(void){
    1b40:	df 93       	push	r29
    1b42:	cf 93       	push	r28
    1b44:	cd b7       	in	r28, 0x3d	; 61
    1b46:	de b7       	in	r29, 0x3e	; 62

	//set direction of rows pins to output
	DIO_vSETPinDirection(Keypad_Port_R,Keypad_R0,DIO_OUTPUT);
    1b48:	81 e0       	ldi	r24, 0x01	; 1
    1b4a:	64 e0       	ldi	r22, 0x04	; 4
    1b4c:	41 e0       	ldi	r20, 0x01	; 1
    1b4e:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vSETPinDirection>
	DIO_vSETPinDirection(Keypad_Port_R,Keypad_R1,DIO_OUTPUT);
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	65 e0       	ldi	r22, 0x05	; 5
    1b56:	41 e0       	ldi	r20, 0x01	; 1
    1b58:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vSETPinDirection>
	DIO_vSETPinDirection(Keypad_Port_R,Keypad_R2,DIO_OUTPUT);
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	66 e0       	ldi	r22, 0x06	; 6
    1b60:	41 e0       	ldi	r20, 0x01	; 1
    1b62:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vSETPinDirection>
	DIO_vSETPinDirection(Keypad_Port_R,Keypad_R3,DIO_OUTPUT);
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	67 e0       	ldi	r22, 0x07	; 7
    1b6a:	41 e0       	ldi	r20, 0x01	; 1
    1b6c:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vSETPinDirection>

	//set direction of columns pins to input
	DIO_vSETPinDirection(Keypad_Port_C,Keypad_C0,DIO_INPUT);
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	60 e0       	ldi	r22, 0x00	; 0
    1b74:	40 e0       	ldi	r20, 0x00	; 0
    1b76:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vSETPinDirection>
	DIO_vSETPinDirection(Keypad_Port_C,Keypad_C1,DIO_INPUT);
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	61 e0       	ldi	r22, 0x01	; 1
    1b7e:	40 e0       	ldi	r20, 0x00	; 0
    1b80:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vSETPinDirection>
	DIO_vSETPinDirection(Keypad_Port_C,Keypad_C2,DIO_INPUT);
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	62 e0       	ldi	r22, 0x02	; 2
    1b88:	40 e0       	ldi	r20, 0x00	; 0
    1b8a:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vSETPinDirection>
	DIO_vSETPinDirection(Keypad_Port_C,Keypad_C3,DIO_INPUT);
    1b8e:	81 e0       	ldi	r24, 0x01	; 1
    1b90:	63 e0       	ldi	r22, 0x03	; 3
    1b92:	40 e0       	ldi	r20, 0x00	; 0
    1b94:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vSETPinDirection>

	//activate pull up resistor for the input pins
	DIO_vSetPullUpResistor(Keypad_Port_C,Keypad_C0);
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	60 e0       	ldi	r22, 0x00	; 0
    1b9c:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_vSetPullUpResistor>
	DIO_vSetPullUpResistor(Keypad_Port_C,Keypad_C1);
    1ba0:	81 e0       	ldi	r24, 0x01	; 1
    1ba2:	61 e0       	ldi	r22, 0x01	; 1
    1ba4:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_vSetPullUpResistor>
	DIO_vSetPullUpResistor(Keypad_Port_C,Keypad_C2);
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	62 e0       	ldi	r22, 0x02	; 2
    1bac:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_vSetPullUpResistor>
	DIO_vSetPullUpResistor(Keypad_Port_C,Keypad_C3);
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
    1bb2:	63 e0       	ldi	r22, 0x03	; 3
    1bb4:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_vSetPullUpResistor>
}
    1bb8:	cf 91       	pop	r28
    1bba:	df 91       	pop	r29
    1bbc:	08 95       	ret

00001bbe <Keypad_uRead>:
u8 Keypad_uRead(void){
    1bbe:	df 93       	push	r29
    1bc0:	cf 93       	push	r28
    1bc2:	00 d0       	rcall	.+0      	; 0x1bc4 <Keypad_uRead+0x6>
    1bc4:	0f 92       	push	r0
    1bc6:	cd b7       	in	r28, 0x3d	; 61
    1bc8:	de b7       	in	r29, 0x3e	; 62
	u8 counter_r;
	u8 counter_c;
	DIO_vSetPinValue(Keypad_Port_R,Keypad_R0, DIO_HIGH);
    1bca:	81 e0       	ldi	r24, 0x01	; 1
    1bcc:	64 e0       	ldi	r22, 0x04	; 4
    1bce:	41 e0       	ldi	r20, 0x01	; 1
    1bd0:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_vSetPinValue>
	DIO_vSetPinValue(Keypad_Port_R,Keypad_R1, DIO_HIGH);
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	65 e0       	ldi	r22, 0x05	; 5
    1bd8:	41 e0       	ldi	r20, 0x01	; 1
    1bda:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_vSetPinValue>
	DIO_vSetPinValue(Keypad_Port_R,Keypad_R2, DIO_HIGH);
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	66 e0       	ldi	r22, 0x06	; 6
    1be2:	41 e0       	ldi	r20, 0x01	; 1
    1be4:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_vSetPinValue>
	DIO_vSetPinValue(Keypad_Port_R,Keypad_R3, DIO_HIGH);
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	67 e0       	ldi	r22, 0x07	; 7
    1bec:	41 e0       	ldi	r20, 0x01	; 1
    1bee:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_vSetPinValue>

	for (counter_r=Keypad_R0;counter_r <= Keypad_R3;counter_r++)
    1bf2:	84 e0       	ldi	r24, 0x04	; 4
    1bf4:	8a 83       	std	Y+2, r24	; 0x02
    1bf6:	31 c0       	rjmp	.+98     	; 0x1c5a <Keypad_uRead+0x9c>
	{
		DIO_vSetPinValue(Keypad_Port_R,counter_r, DIO_LOW);
    1bf8:	81 e0       	ldi	r24, 0x01	; 1
    1bfa:	6a 81       	ldd	r22, Y+2	; 0x02
    1bfc:	40 e0       	ldi	r20, 0x00	; 0
    1bfe:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_vSetPinValue>
		for (counter_c=Keypad_C0;counter_c<=Keypad_C3;counter_c++)
    1c02:	19 82       	std	Y+1, r1	; 0x01
    1c04:	1f c0       	rjmp	.+62     	; 0x1c44 <Keypad_uRead+0x86>
		{
			if (!DIO_u8GetPinValue(Keypad_Port_C,counter_c))
    1c06:	81 e0       	ldi	r24, 0x01	; 1
    1c08:	69 81       	ldd	r22, Y+1	; 0x01
    1c0a:	0e 94 de 07 	call	0xfbc	; 0xfbc <DIO_u8GetPinValue>
    1c0e:	88 23       	and	r24, r24
    1c10:	b1 f4       	brne	.+44     	; 0x1c3e <Keypad_uRead+0x80>
			{
				return Keypad_Array[counter_r-4][counter_c];
    1c12:	8a 81       	ldd	r24, Y+2	; 0x02
    1c14:	88 2f       	mov	r24, r24
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	ac 01       	movw	r20, r24
    1c1a:	44 50       	subi	r20, 0x04	; 4
    1c1c:	50 40       	sbci	r21, 0x00	; 0
    1c1e:	89 81       	ldd	r24, Y+1	; 0x01
    1c20:	28 2f       	mov	r18, r24
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	ca 01       	movw	r24, r20
    1c26:	88 0f       	add	r24, r24
    1c28:	99 1f       	adc	r25, r25
    1c2a:	88 0f       	add	r24, r24
    1c2c:	99 1f       	adc	r25, r25
    1c2e:	82 0f       	add	r24, r18
    1c30:	93 1f       	adc	r25, r19
    1c32:	fc 01       	movw	r30, r24
    1c34:	e8 59       	subi	r30, 0x98	; 152
    1c36:	ff 4f       	sbci	r31, 0xFF	; 255
    1c38:	80 81       	ld	r24, Z
    1c3a:	8b 83       	std	Y+3, r24	; 0x03
    1c3c:	13 c0       	rjmp	.+38     	; 0x1c64 <Keypad_uRead+0xa6>
	DIO_vSetPinValue(Keypad_Port_R,Keypad_R3, DIO_HIGH);

	for (counter_r=Keypad_R0;counter_r <= Keypad_R3;counter_r++)
	{
		DIO_vSetPinValue(Keypad_Port_R,counter_r, DIO_LOW);
		for (counter_c=Keypad_C0;counter_c<=Keypad_C3;counter_c++)
    1c3e:	89 81       	ldd	r24, Y+1	; 0x01
    1c40:	8f 5f       	subi	r24, 0xFF	; 255
    1c42:	89 83       	std	Y+1, r24	; 0x01
    1c44:	89 81       	ldd	r24, Y+1	; 0x01
    1c46:	84 30       	cpi	r24, 0x04	; 4
    1c48:	f0 f2       	brcs	.-68     	; 0x1c06 <Keypad_uRead+0x48>
			if (!DIO_u8GetPinValue(Keypad_Port_C,counter_c))
			{
				return Keypad_Array[counter_r-4][counter_c];
			}
		}
		DIO_vSetPinValue(Keypad_Port_R,counter_r, DIO_HIGH);
    1c4a:	81 e0       	ldi	r24, 0x01	; 1
    1c4c:	6a 81       	ldd	r22, Y+2	; 0x02
    1c4e:	41 e0       	ldi	r20, 0x01	; 1
    1c50:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_vSetPinValue>
	DIO_vSetPinValue(Keypad_Port_R,Keypad_R0, DIO_HIGH);
	DIO_vSetPinValue(Keypad_Port_R,Keypad_R1, DIO_HIGH);
	DIO_vSetPinValue(Keypad_Port_R,Keypad_R2, DIO_HIGH);
	DIO_vSetPinValue(Keypad_Port_R,Keypad_R3, DIO_HIGH);

	for (counter_r=Keypad_R0;counter_r <= Keypad_R3;counter_r++)
    1c54:	8a 81       	ldd	r24, Y+2	; 0x02
    1c56:	8f 5f       	subi	r24, 0xFF	; 255
    1c58:	8a 83       	std	Y+2, r24	; 0x02
    1c5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5c:	88 30       	cpi	r24, 0x08	; 8
    1c5e:	60 f2       	brcs	.-104    	; 0x1bf8 <Keypad_uRead+0x3a>
				return Keypad_Array[counter_r-4][counter_c];
			}
		}
		DIO_vSetPinValue(Keypad_Port_R,counter_r, DIO_HIGH);
	}
	return 62;
    1c60:	8e e3       	ldi	r24, 0x3E	; 62
    1c62:	8b 83       	std	Y+3, r24	; 0x03
    1c64:	8b 81       	ldd	r24, Y+3	; 0x03

}
    1c66:	0f 90       	pop	r0
    1c68:	0f 90       	pop	r0
    1c6a:	0f 90       	pop	r0
    1c6c:	cf 91       	pop	r28
    1c6e:	df 91       	pop	r29
    1c70:	08 95       	ret

00001c72 <main>:
#include <util/delay.h>
#include "LCD_prog.h"
#include "DIO_Int.h"
#include "Keypad_int.h"

void main (void){
    1c72:	0f 93       	push	r16
    1c74:	1f 93       	push	r17
    1c76:	df 93       	push	r29
    1c78:	cf 93       	push	r28
    1c7a:	cd b7       	in	r28, 0x3d	; 61
    1c7c:	de b7       	in	r29, 0x3e	; 62
    1c7e:	c2 55       	subi	r28, 0x52	; 82
    1c80:	d0 40       	sbci	r29, 0x00	; 0
    1c82:	0f b6       	in	r0, 0x3f	; 63
    1c84:	f8 94       	cli
    1c86:	de bf       	out	0x3e, r29	; 62
    1c88:	0f be       	out	0x3f, r0	; 63
    1c8a:	cd bf       	out	0x3d, r28	; 61
	Keypad_vInitialization();
    1c8c:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <Keypad_vInitialization>
	Lcd_vInitialization();
    1c90:	0e 94 80 0a 	call	0x1500	; 0x1500 <Lcd_vInitialization>
	u8 num2;
	u8 operation ;
	u8 result[4];
	u8 result_num;
	u8 i;
	u8 value=65;
    1c94:	fe 01       	movw	r30, r28
    1c96:	e9 5b       	subi	r30, 0xB9	; 185
    1c98:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9a:	81 e4       	ldi	r24, 0x41	; 65
    1c9c:	80 83       	st	Z, r24
	while (1)
	{
		i=0;
    1c9e:	fe 01       	movw	r30, r28
    1ca0:	e8 5b       	subi	r30, 0xB8	; 184
    1ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca4:	10 82       	st	Z, r1
		num1=0;
    1ca6:	fe 01       	movw	r30, r28
    1ca8:	e4 5b       	subi	r30, 0xB4	; 180
    1caa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cac:	10 82       	st	Z, r1
		num2=0;
    1cae:	fe 01       	movw	r30, r28
    1cb0:	e5 5b       	subi	r30, 0xB5	; 181
    1cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb4:	10 82       	st	Z, r1
		result_num=0;
    1cb6:	fe 01       	movw	r30, r28
    1cb8:	e7 5b       	subi	r30, 0xB7	; 183
    1cba:	ff 4f       	sbci	r31, 0xFF	; 255
    1cbc:	10 82       	st	Z, r1
		operation = 0;
    1cbe:	fe 01       	movw	r30, r28
    1cc0:	e6 5b       	subi	r30, 0xB6	; 182
    1cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc4:	10 82       	st	Z, r1
		while(1)
		{
			value=Keypad_uRead();
    1cc6:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <Keypad_uRead>
    1cca:	fe 01       	movw	r30, r28
    1ccc:	e9 5b       	subi	r30, 0xB9	; 185
    1cce:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd0:	80 83       	st	Z, r24
			if ((value>47)&&(value<58))
    1cd2:	fe 01       	movw	r30, r28
    1cd4:	e9 5b       	subi	r30, 0xB9	; 185
    1cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd8:	80 81       	ld	r24, Z
    1cda:	80 33       	cpi	r24, 0x30	; 48
    1cdc:	08 f4       	brcc	.+2      	; 0x1ce0 <main+0x6e>
    1cde:	d6 c0       	rjmp	.+428    	; 0x1e8c <main+0x21a>
    1ce0:	fe 01       	movw	r30, r28
    1ce2:	e9 5b       	subi	r30, 0xB9	; 185
    1ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce6:	80 81       	ld	r24, Z
    1ce8:	8a 33       	cpi	r24, 0x3A	; 58
    1cea:	08 f0       	brcs	.+2      	; 0x1cee <main+0x7c>
    1cec:	cf c0       	rjmp	.+414    	; 0x1e8c <main+0x21a>
			{
				LCD_vWriteData(value);
    1cee:	fe 01       	movw	r30, r28
    1cf0:	e9 5b       	subi	r30, 0xB9	; 185
    1cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf4:	80 81       	ld	r24, Z
    1cf6:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <LCD_vWriteData>
				num1 += (value-48) + 10*(value-48)*i-(value-48)*i;
    1cfa:	fe 01       	movw	r30, r28
    1cfc:	e9 5b       	subi	r30, 0xB9	; 185
    1cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1d00:	80 81       	ld	r24, Z
    1d02:	28 2f       	mov	r18, r24
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	80 e3       	ldi	r24, 0x30	; 48
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	ac 01       	movw	r20, r24
    1d0c:	42 1b       	sub	r20, r18
    1d0e:	53 0b       	sbc	r21, r19
    1d10:	fe 01       	movw	r30, r28
    1d12:	e9 5b       	subi	r30, 0xB9	; 185
    1d14:	ff 4f       	sbci	r31, 0xFF	; 255
    1d16:	80 81       	ld	r24, Z
    1d18:	88 2f       	mov	r24, r24
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	9c 01       	movw	r18, r24
    1d1e:	22 0f       	add	r18, r18
    1d20:	33 1f       	adc	r19, r19
    1d22:	c9 01       	movw	r24, r18
    1d24:	88 0f       	add	r24, r24
    1d26:	99 1f       	adc	r25, r25
    1d28:	88 0f       	add	r24, r24
    1d2a:	99 1f       	adc	r25, r25
    1d2c:	82 0f       	add	r24, r18
    1d2e:	93 1f       	adc	r25, r19
    1d30:	80 5e       	subi	r24, 0xE0	; 224
    1d32:	91 40       	sbci	r25, 0x01	; 1
    1d34:	9a 01       	movw	r18, r20
    1d36:	28 0f       	add	r18, r24
    1d38:	39 1f       	adc	r19, r25
    1d3a:	fe 01       	movw	r30, r28
    1d3c:	e8 5b       	subi	r30, 0xB8	; 184
    1d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d40:	80 81       	ld	r24, Z
    1d42:	88 2f       	mov	r24, r24
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	ac 01       	movw	r20, r24
    1d48:	24 9f       	mul	r18, r20
    1d4a:	c0 01       	movw	r24, r0
    1d4c:	25 9f       	mul	r18, r21
    1d4e:	90 0d       	add	r25, r0
    1d50:	34 9f       	mul	r19, r20
    1d52:	90 0d       	add	r25, r0
    1d54:	11 24       	eor	r1, r1
    1d56:	98 2f       	mov	r25, r24
    1d58:	fe 01       	movw	r30, r28
    1d5a:	e9 5b       	subi	r30, 0xB9	; 185
    1d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5e:	80 81       	ld	r24, Z
    1d60:	98 0f       	add	r25, r24
    1d62:	fe 01       	movw	r30, r28
    1d64:	e4 5b       	subi	r30, 0xB4	; 180
    1d66:	ff 4f       	sbci	r31, 0xFF	; 255
    1d68:	80 81       	ld	r24, Z
    1d6a:	89 0f       	add	r24, r25
    1d6c:	fe 01       	movw	r30, r28
    1d6e:	e4 5b       	subi	r30, 0xB4	; 180
    1d70:	ff 4f       	sbci	r31, 0xFF	; 255
    1d72:	80 53       	subi	r24, 0x30	; 48
    1d74:	80 83       	st	Z, r24
    1d76:	fe 01       	movw	r30, r28
    1d78:	ed 5b       	subi	r30, 0xBD	; 189
    1d7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7c:	80 e0       	ldi	r24, 0x00	; 0
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	a1 ee       	ldi	r26, 0xE1	; 225
    1d82:	b3 e4       	ldi	r27, 0x43	; 67
    1d84:	80 83       	st	Z, r24
    1d86:	91 83       	std	Z+1, r25	; 0x01
    1d88:	a2 83       	std	Z+2, r26	; 0x02
    1d8a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d8c:	8e 01       	movw	r16, r28
    1d8e:	01 5c       	subi	r16, 0xC1	; 193
    1d90:	1f 4f       	sbci	r17, 0xFF	; 255
    1d92:	fe 01       	movw	r30, r28
    1d94:	ed 5b       	subi	r30, 0xBD	; 189
    1d96:	ff 4f       	sbci	r31, 0xFF	; 255
    1d98:	60 81       	ld	r22, Z
    1d9a:	71 81       	ldd	r23, Z+1	; 0x01
    1d9c:	82 81       	ldd	r24, Z+2	; 0x02
    1d9e:	93 81       	ldd	r25, Z+3	; 0x03
    1da0:	20 e0       	ldi	r18, 0x00	; 0
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	4a ef       	ldi	r20, 0xFA	; 250
    1da6:	54 e4       	ldi	r21, 0x44	; 68
    1da8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dac:	dc 01       	movw	r26, r24
    1dae:	cb 01       	movw	r24, r22
    1db0:	f8 01       	movw	r30, r16
    1db2:	80 83       	st	Z, r24
    1db4:	91 83       	std	Z+1, r25	; 0x01
    1db6:	a2 83       	std	Z+2, r26	; 0x02
    1db8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1dba:	fe 01       	movw	r30, r28
    1dbc:	ff 96       	adiw	r30, 0x3f	; 63
    1dbe:	60 81       	ld	r22, Z
    1dc0:	71 81       	ldd	r23, Z+1	; 0x01
    1dc2:	82 81       	ldd	r24, Z+2	; 0x02
    1dc4:	93 81       	ldd	r25, Z+3	; 0x03
    1dc6:	20 e0       	ldi	r18, 0x00	; 0
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	40 e8       	ldi	r20, 0x80	; 128
    1dcc:	5f e3       	ldi	r21, 0x3F	; 63
    1dce:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1dd2:	88 23       	and	r24, r24
    1dd4:	2c f4       	brge	.+10     	; 0x1de0 <main+0x16e>
		__ticks = 1;
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	9e af       	std	Y+62, r25	; 0x3e
    1ddc:	8d af       	std	Y+61, r24	; 0x3d
    1dde:	46 c0       	rjmp	.+140    	; 0x1e6c <main+0x1fa>
	else if (__tmp > 65535)
    1de0:	fe 01       	movw	r30, r28
    1de2:	ff 96       	adiw	r30, 0x3f	; 63
    1de4:	60 81       	ld	r22, Z
    1de6:	71 81       	ldd	r23, Z+1	; 0x01
    1de8:	82 81       	ldd	r24, Z+2	; 0x02
    1dea:	93 81       	ldd	r25, Z+3	; 0x03
    1dec:	20 e0       	ldi	r18, 0x00	; 0
    1dee:	3f ef       	ldi	r19, 0xFF	; 255
    1df0:	4f e7       	ldi	r20, 0x7F	; 127
    1df2:	57 e4       	ldi	r21, 0x47	; 71
    1df4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1df8:	18 16       	cp	r1, r24
    1dfa:	64 f5       	brge	.+88     	; 0x1e54 <main+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dfc:	fe 01       	movw	r30, r28
    1dfe:	ed 5b       	subi	r30, 0xBD	; 189
    1e00:	ff 4f       	sbci	r31, 0xFF	; 255
    1e02:	60 81       	ld	r22, Z
    1e04:	71 81       	ldd	r23, Z+1	; 0x01
    1e06:	82 81       	ldd	r24, Z+2	; 0x02
    1e08:	93 81       	ldd	r25, Z+3	; 0x03
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	40 e2       	ldi	r20, 0x20	; 32
    1e10:	51 e4       	ldi	r21, 0x41	; 65
    1e12:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e16:	dc 01       	movw	r26, r24
    1e18:	cb 01       	movw	r24, r22
    1e1a:	bc 01       	movw	r22, r24
    1e1c:	cd 01       	movw	r24, r26
    1e1e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e22:	dc 01       	movw	r26, r24
    1e24:	cb 01       	movw	r24, r22
    1e26:	9e af       	std	Y+62, r25	; 0x3e
    1e28:	8d af       	std	Y+61, r24	; 0x3d
    1e2a:	0f c0       	rjmp	.+30     	; 0x1e4a <main+0x1d8>
    1e2c:	88 ec       	ldi	r24, 0xC8	; 200
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	9c af       	std	Y+60, r25	; 0x3c
    1e32:	8b af       	std	Y+59, r24	; 0x3b
    1e34:	8b ad       	ldd	r24, Y+59	; 0x3b
    1e36:	9c ad       	ldd	r25, Y+60	; 0x3c
    1e38:	01 97       	sbiw	r24, 0x01	; 1
    1e3a:	f1 f7       	brne	.-4      	; 0x1e38 <main+0x1c6>
    1e3c:	9c af       	std	Y+60, r25	; 0x3c
    1e3e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e40:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e42:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e44:	01 97       	sbiw	r24, 0x01	; 1
    1e46:	9e af       	std	Y+62, r25	; 0x3e
    1e48:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e4a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e4c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e4e:	00 97       	sbiw	r24, 0x00	; 0
    1e50:	69 f7       	brne	.-38     	; 0x1e2c <main+0x1ba>
    1e52:	16 c0       	rjmp	.+44     	; 0x1e80 <main+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e54:	fe 01       	movw	r30, r28
    1e56:	ff 96       	adiw	r30, 0x3f	; 63
    1e58:	60 81       	ld	r22, Z
    1e5a:	71 81       	ldd	r23, Z+1	; 0x01
    1e5c:	82 81       	ldd	r24, Z+2	; 0x02
    1e5e:	93 81       	ldd	r25, Z+3	; 0x03
    1e60:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e64:	dc 01       	movw	r26, r24
    1e66:	cb 01       	movw	r24, r22
    1e68:	9e af       	std	Y+62, r25	; 0x3e
    1e6a:	8d af       	std	Y+61, r24	; 0x3d
    1e6c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e6e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e70:	9a af       	std	Y+58, r25	; 0x3a
    1e72:	89 af       	std	Y+57, r24	; 0x39
    1e74:	89 ad       	ldd	r24, Y+57	; 0x39
    1e76:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e78:	01 97       	sbiw	r24, 0x01	; 1
    1e7a:	f1 f7       	brne	.-4      	; 0x1e78 <main+0x206>
    1e7c:	9a af       	std	Y+58, r25	; 0x3a
    1e7e:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(450);
				i=1;
    1e80:	fe 01       	movw	r30, r28
    1e82:	e8 5b       	subi	r30, 0xB8	; 184
    1e84:	ff 4f       	sbci	r31, 0xFF	; 255
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	80 83       	st	Z, r24
    1e8a:	1d cf       	rjmp	.-454    	; 0x1cc6 <main+0x54>
			}
			else if ((value<48)&&(i==1))
    1e8c:	fe 01       	movw	r30, r28
    1e8e:	e9 5b       	subi	r30, 0xB9	; 185
    1e90:	ff 4f       	sbci	r31, 0xFF	; 255
    1e92:	80 81       	ld	r24, Z
    1e94:	80 33       	cpi	r24, 0x30	; 48
    1e96:	08 f0       	brcs	.+2      	; 0x1e9a <main+0x228>
    1e98:	16 cf       	rjmp	.-468    	; 0x1cc6 <main+0x54>
    1e9a:	fe 01       	movw	r30, r28
    1e9c:	e8 5b       	subi	r30, 0xB8	; 184
    1e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea0:	80 81       	ld	r24, Z
    1ea2:	81 30       	cpi	r24, 0x01	; 1
    1ea4:	09 f0       	breq	.+2      	; 0x1ea8 <main+0x236>
    1ea6:	0f cf       	rjmp	.-482    	; 0x1cc6 <main+0x54>
			{
				operation =value;
    1ea8:	de 01       	movw	r26, r28
    1eaa:	a6 5b       	subi	r26, 0xB6	; 182
    1eac:	bf 4f       	sbci	r27, 0xFF	; 255
    1eae:	fe 01       	movw	r30, r28
    1eb0:	e9 5b       	subi	r30, 0xB9	; 185
    1eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb4:	80 81       	ld	r24, Z
    1eb6:	8c 93       	st	X, r24
				LCD_vWriteData(operation);
    1eb8:	fe 01       	movw	r30, r28
    1eba:	e6 5b       	subi	r30, 0xB6	; 182
    1ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebe:	80 81       	ld	r24, Z
    1ec0:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <LCD_vWriteData>
    1ec4:	80 e0       	ldi	r24, 0x00	; 0
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	a1 ee       	ldi	r26, 0xE1	; 225
    1eca:	b3 e4       	ldi	r27, 0x43	; 67
    1ecc:	8d ab       	std	Y+53, r24	; 0x35
    1ece:	9e ab       	std	Y+54, r25	; 0x36
    1ed0:	af ab       	std	Y+55, r26	; 0x37
    1ed2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ed4:	6d a9       	ldd	r22, Y+53	; 0x35
    1ed6:	7e a9       	ldd	r23, Y+54	; 0x36
    1ed8:	8f a9       	ldd	r24, Y+55	; 0x37
    1eda:	98 ad       	ldd	r25, Y+56	; 0x38
    1edc:	20 e0       	ldi	r18, 0x00	; 0
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	4a ef       	ldi	r20, 0xFA	; 250
    1ee2:	54 e4       	ldi	r21, 0x44	; 68
    1ee4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ee8:	dc 01       	movw	r26, r24
    1eea:	cb 01       	movw	r24, r22
    1eec:	89 ab       	std	Y+49, r24	; 0x31
    1eee:	9a ab       	std	Y+50, r25	; 0x32
    1ef0:	ab ab       	std	Y+51, r26	; 0x33
    1ef2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ef4:	69 a9       	ldd	r22, Y+49	; 0x31
    1ef6:	7a a9       	ldd	r23, Y+50	; 0x32
    1ef8:	8b a9       	ldd	r24, Y+51	; 0x33
    1efa:	9c a9       	ldd	r25, Y+52	; 0x34
    1efc:	20 e0       	ldi	r18, 0x00	; 0
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	40 e8       	ldi	r20, 0x80	; 128
    1f02:	5f e3       	ldi	r21, 0x3F	; 63
    1f04:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f08:	88 23       	and	r24, r24
    1f0a:	2c f4       	brge	.+10     	; 0x1f16 <main+0x2a4>
		__ticks = 1;
    1f0c:	81 e0       	ldi	r24, 0x01	; 1
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	98 ab       	std	Y+48, r25	; 0x30
    1f12:	8f a7       	std	Y+47, r24	; 0x2f
    1f14:	3f c0       	rjmp	.+126    	; 0x1f94 <main+0x322>
	else if (__tmp > 65535)
    1f16:	69 a9       	ldd	r22, Y+49	; 0x31
    1f18:	7a a9       	ldd	r23, Y+50	; 0x32
    1f1a:	8b a9       	ldd	r24, Y+51	; 0x33
    1f1c:	9c a9       	ldd	r25, Y+52	; 0x34
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	3f ef       	ldi	r19, 0xFF	; 255
    1f22:	4f e7       	ldi	r20, 0x7F	; 127
    1f24:	57 e4       	ldi	r21, 0x47	; 71
    1f26:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f2a:	18 16       	cp	r1, r24
    1f2c:	4c f5       	brge	.+82     	; 0x1f80 <main+0x30e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f2e:	6d a9       	ldd	r22, Y+53	; 0x35
    1f30:	7e a9       	ldd	r23, Y+54	; 0x36
    1f32:	8f a9       	ldd	r24, Y+55	; 0x37
    1f34:	98 ad       	ldd	r25, Y+56	; 0x38
    1f36:	20 e0       	ldi	r18, 0x00	; 0
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	40 e2       	ldi	r20, 0x20	; 32
    1f3c:	51 e4       	ldi	r21, 0x41	; 65
    1f3e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f42:	dc 01       	movw	r26, r24
    1f44:	cb 01       	movw	r24, r22
    1f46:	bc 01       	movw	r22, r24
    1f48:	cd 01       	movw	r24, r26
    1f4a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f4e:	dc 01       	movw	r26, r24
    1f50:	cb 01       	movw	r24, r22
    1f52:	98 ab       	std	Y+48, r25	; 0x30
    1f54:	8f a7       	std	Y+47, r24	; 0x2f
    1f56:	0f c0       	rjmp	.+30     	; 0x1f76 <main+0x304>
    1f58:	88 ec       	ldi	r24, 0xC8	; 200
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	9e a7       	std	Y+46, r25	; 0x2e
    1f5e:	8d a7       	std	Y+45, r24	; 0x2d
    1f60:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f62:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f64:	01 97       	sbiw	r24, 0x01	; 1
    1f66:	f1 f7       	brne	.-4      	; 0x1f64 <main+0x2f2>
    1f68:	9e a7       	std	Y+46, r25	; 0x2e
    1f6a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f6c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f6e:	98 a9       	ldd	r25, Y+48	; 0x30
    1f70:	01 97       	sbiw	r24, 0x01	; 1
    1f72:	98 ab       	std	Y+48, r25	; 0x30
    1f74:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f76:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f78:	98 a9       	ldd	r25, Y+48	; 0x30
    1f7a:	00 97       	sbiw	r24, 0x00	; 0
    1f7c:	69 f7       	brne	.-38     	; 0x1f58 <main+0x2e6>
    1f7e:	14 c0       	rjmp	.+40     	; 0x1fa8 <main+0x336>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f80:	69 a9       	ldd	r22, Y+49	; 0x31
    1f82:	7a a9       	ldd	r23, Y+50	; 0x32
    1f84:	8b a9       	ldd	r24, Y+51	; 0x33
    1f86:	9c a9       	ldd	r25, Y+52	; 0x34
    1f88:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f8c:	dc 01       	movw	r26, r24
    1f8e:	cb 01       	movw	r24, r22
    1f90:	98 ab       	std	Y+48, r25	; 0x30
    1f92:	8f a7       	std	Y+47, r24	; 0x2f
    1f94:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f96:	98 a9       	ldd	r25, Y+48	; 0x30
    1f98:	9c a7       	std	Y+44, r25	; 0x2c
    1f9a:	8b a7       	std	Y+43, r24	; 0x2b
    1f9c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f9e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fa0:	01 97       	sbiw	r24, 0x01	; 1
    1fa2:	f1 f7       	brne	.-4      	; 0x1fa0 <main+0x32e>
    1fa4:	9c a7       	std	Y+44, r25	; 0x2c
    1fa6:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(450);
				i=0;
    1fa8:	fe 01       	movw	r30, r28
    1faa:	e8 5b       	subi	r30, 0xB8	; 184
    1fac:	ff 4f       	sbci	r31, 0xFF	; 255
    1fae:	10 82       	st	Z, r1
				value=65;
    1fb0:	fe 01       	movw	r30, r28
    1fb2:	e9 5b       	subi	r30, 0xB9	; 185
    1fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb6:	81 e4       	ldi	r24, 0x41	; 65
    1fb8:	80 83       	st	Z, r24
			}else
				continue;
		}
		while(1)
		{
			value=Keypad_uRead();
    1fba:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <Keypad_uRead>
    1fbe:	fe 01       	movw	r30, r28
    1fc0:	e9 5b       	subi	r30, 0xB9	; 185
    1fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc4:	80 83       	st	Z, r24
			if ((value>47)&&(value<58))
    1fc6:	fe 01       	movw	r30, r28
    1fc8:	e9 5b       	subi	r30, 0xB9	; 185
    1fca:	ff 4f       	sbci	r31, 0xFF	; 255
    1fcc:	80 81       	ld	r24, Z
    1fce:	80 33       	cpi	r24, 0x30	; 48
    1fd0:	08 f4       	brcc	.+2      	; 0x1fd4 <main+0x362>
    1fd2:	c3 c0       	rjmp	.+390    	; 0x215a <main+0x4e8>
    1fd4:	fe 01       	movw	r30, r28
    1fd6:	e9 5b       	subi	r30, 0xB9	; 185
    1fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fda:	80 81       	ld	r24, Z
    1fdc:	8a 33       	cpi	r24, 0x3A	; 58
    1fde:	08 f0       	brcs	.+2      	; 0x1fe2 <main+0x370>
    1fe0:	bc c0       	rjmp	.+376    	; 0x215a <main+0x4e8>
			{
				LCD_vWriteData(value);
    1fe2:	fe 01       	movw	r30, r28
    1fe4:	e9 5b       	subi	r30, 0xB9	; 185
    1fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe8:	80 81       	ld	r24, Z
    1fea:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <LCD_vWriteData>
				num2 += (value-48) + 10*(value-48)*i-(value-48)*i;
    1fee:	fe 01       	movw	r30, r28
    1ff0:	e9 5b       	subi	r30, 0xB9	; 185
    1ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff4:	80 81       	ld	r24, Z
    1ff6:	28 2f       	mov	r18, r24
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	80 e3       	ldi	r24, 0x30	; 48
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	ac 01       	movw	r20, r24
    2000:	42 1b       	sub	r20, r18
    2002:	53 0b       	sbc	r21, r19
    2004:	fe 01       	movw	r30, r28
    2006:	e9 5b       	subi	r30, 0xB9	; 185
    2008:	ff 4f       	sbci	r31, 0xFF	; 255
    200a:	80 81       	ld	r24, Z
    200c:	88 2f       	mov	r24, r24
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	9c 01       	movw	r18, r24
    2012:	22 0f       	add	r18, r18
    2014:	33 1f       	adc	r19, r19
    2016:	c9 01       	movw	r24, r18
    2018:	88 0f       	add	r24, r24
    201a:	99 1f       	adc	r25, r25
    201c:	88 0f       	add	r24, r24
    201e:	99 1f       	adc	r25, r25
    2020:	82 0f       	add	r24, r18
    2022:	93 1f       	adc	r25, r19
    2024:	80 5e       	subi	r24, 0xE0	; 224
    2026:	91 40       	sbci	r25, 0x01	; 1
    2028:	9a 01       	movw	r18, r20
    202a:	28 0f       	add	r18, r24
    202c:	39 1f       	adc	r19, r25
    202e:	fe 01       	movw	r30, r28
    2030:	e8 5b       	subi	r30, 0xB8	; 184
    2032:	ff 4f       	sbci	r31, 0xFF	; 255
    2034:	80 81       	ld	r24, Z
    2036:	88 2f       	mov	r24, r24
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	ac 01       	movw	r20, r24
    203c:	24 9f       	mul	r18, r20
    203e:	c0 01       	movw	r24, r0
    2040:	25 9f       	mul	r18, r21
    2042:	90 0d       	add	r25, r0
    2044:	34 9f       	mul	r19, r20
    2046:	90 0d       	add	r25, r0
    2048:	11 24       	eor	r1, r1
    204a:	98 2f       	mov	r25, r24
    204c:	fe 01       	movw	r30, r28
    204e:	e9 5b       	subi	r30, 0xB9	; 185
    2050:	ff 4f       	sbci	r31, 0xFF	; 255
    2052:	80 81       	ld	r24, Z
    2054:	98 0f       	add	r25, r24
    2056:	fe 01       	movw	r30, r28
    2058:	e5 5b       	subi	r30, 0xB5	; 181
    205a:	ff 4f       	sbci	r31, 0xFF	; 255
    205c:	80 81       	ld	r24, Z
    205e:	89 0f       	add	r24, r25
    2060:	fe 01       	movw	r30, r28
    2062:	e5 5b       	subi	r30, 0xB5	; 181
    2064:	ff 4f       	sbci	r31, 0xFF	; 255
    2066:	80 53       	subi	r24, 0x30	; 48
    2068:	80 83       	st	Z, r24
    206a:	80 e0       	ldi	r24, 0x00	; 0
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	a1 ee       	ldi	r26, 0xE1	; 225
    2070:	b3 e4       	ldi	r27, 0x43	; 67
    2072:	8f a3       	std	Y+39, r24	; 0x27
    2074:	98 a7       	std	Y+40, r25	; 0x28
    2076:	a9 a7       	std	Y+41, r26	; 0x29
    2078:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    207a:	6f a1       	ldd	r22, Y+39	; 0x27
    207c:	78 a5       	ldd	r23, Y+40	; 0x28
    207e:	89 a5       	ldd	r24, Y+41	; 0x29
    2080:	9a a5       	ldd	r25, Y+42	; 0x2a
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	4a ef       	ldi	r20, 0xFA	; 250
    2088:	54 e4       	ldi	r21, 0x44	; 68
    208a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    208e:	dc 01       	movw	r26, r24
    2090:	cb 01       	movw	r24, r22
    2092:	8b a3       	std	Y+35, r24	; 0x23
    2094:	9c a3       	std	Y+36, r25	; 0x24
    2096:	ad a3       	std	Y+37, r26	; 0x25
    2098:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    209a:	6b a1       	ldd	r22, Y+35	; 0x23
    209c:	7c a1       	ldd	r23, Y+36	; 0x24
    209e:	8d a1       	ldd	r24, Y+37	; 0x25
    20a0:	9e a1       	ldd	r25, Y+38	; 0x26
    20a2:	20 e0       	ldi	r18, 0x00	; 0
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	40 e8       	ldi	r20, 0x80	; 128
    20a8:	5f e3       	ldi	r21, 0x3F	; 63
    20aa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    20ae:	88 23       	and	r24, r24
    20b0:	2c f4       	brge	.+10     	; 0x20bc <main+0x44a>
		__ticks = 1;
    20b2:	81 e0       	ldi	r24, 0x01	; 1
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	9a a3       	std	Y+34, r25	; 0x22
    20b8:	89 a3       	std	Y+33, r24	; 0x21
    20ba:	3f c0       	rjmp	.+126    	; 0x213a <main+0x4c8>
	else if (__tmp > 65535)
    20bc:	6b a1       	ldd	r22, Y+35	; 0x23
    20be:	7c a1       	ldd	r23, Y+36	; 0x24
    20c0:	8d a1       	ldd	r24, Y+37	; 0x25
    20c2:	9e a1       	ldd	r25, Y+38	; 0x26
    20c4:	20 e0       	ldi	r18, 0x00	; 0
    20c6:	3f ef       	ldi	r19, 0xFF	; 255
    20c8:	4f e7       	ldi	r20, 0x7F	; 127
    20ca:	57 e4       	ldi	r21, 0x47	; 71
    20cc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    20d0:	18 16       	cp	r1, r24
    20d2:	4c f5       	brge	.+82     	; 0x2126 <main+0x4b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d4:	6f a1       	ldd	r22, Y+39	; 0x27
    20d6:	78 a5       	ldd	r23, Y+40	; 0x28
    20d8:	89 a5       	ldd	r24, Y+41	; 0x29
    20da:	9a a5       	ldd	r25, Y+42	; 0x2a
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	40 e2       	ldi	r20, 0x20	; 32
    20e2:	51 e4       	ldi	r21, 0x41	; 65
    20e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20e8:	dc 01       	movw	r26, r24
    20ea:	cb 01       	movw	r24, r22
    20ec:	bc 01       	movw	r22, r24
    20ee:	cd 01       	movw	r24, r26
    20f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20f4:	dc 01       	movw	r26, r24
    20f6:	cb 01       	movw	r24, r22
    20f8:	9a a3       	std	Y+34, r25	; 0x22
    20fa:	89 a3       	std	Y+33, r24	; 0x21
    20fc:	0f c0       	rjmp	.+30     	; 0x211c <main+0x4aa>
    20fe:	88 ec       	ldi	r24, 0xC8	; 200
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	98 a3       	std	Y+32, r25	; 0x20
    2104:	8f 8f       	std	Y+31, r24	; 0x1f
    2106:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2108:	98 a1       	ldd	r25, Y+32	; 0x20
    210a:	01 97       	sbiw	r24, 0x01	; 1
    210c:	f1 f7       	brne	.-4      	; 0x210a <main+0x498>
    210e:	98 a3       	std	Y+32, r25	; 0x20
    2110:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2112:	89 a1       	ldd	r24, Y+33	; 0x21
    2114:	9a a1       	ldd	r25, Y+34	; 0x22
    2116:	01 97       	sbiw	r24, 0x01	; 1
    2118:	9a a3       	std	Y+34, r25	; 0x22
    211a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    211c:	89 a1       	ldd	r24, Y+33	; 0x21
    211e:	9a a1       	ldd	r25, Y+34	; 0x22
    2120:	00 97       	sbiw	r24, 0x00	; 0
    2122:	69 f7       	brne	.-38     	; 0x20fe <main+0x48c>
    2124:	14 c0       	rjmp	.+40     	; 0x214e <main+0x4dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2126:	6b a1       	ldd	r22, Y+35	; 0x23
    2128:	7c a1       	ldd	r23, Y+36	; 0x24
    212a:	8d a1       	ldd	r24, Y+37	; 0x25
    212c:	9e a1       	ldd	r25, Y+38	; 0x26
    212e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2132:	dc 01       	movw	r26, r24
    2134:	cb 01       	movw	r24, r22
    2136:	9a a3       	std	Y+34, r25	; 0x22
    2138:	89 a3       	std	Y+33, r24	; 0x21
    213a:	89 a1       	ldd	r24, Y+33	; 0x21
    213c:	9a a1       	ldd	r25, Y+34	; 0x22
    213e:	9e 8f       	std	Y+30, r25	; 0x1e
    2140:	8d 8f       	std	Y+29, r24	; 0x1d
    2142:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2144:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2146:	01 97       	sbiw	r24, 0x01	; 1
    2148:	f1 f7       	brne	.-4      	; 0x2146 <main+0x4d4>
    214a:	9e 8f       	std	Y+30, r25	; 0x1e
    214c:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(450);
				i=1;
    214e:	fe 01       	movw	r30, r28
    2150:	e8 5b       	subi	r30, 0xB8	; 184
    2152:	ff 4f       	sbci	r31, 0xFF	; 255
    2154:	81 e0       	ldi	r24, 0x01	; 1
    2156:	80 83       	st	Z, r24
    2158:	30 cf       	rjmp	.-416    	; 0x1fba <main+0x348>
			}
			else if ((value==61)&&(i==1))
    215a:	fe 01       	movw	r30, r28
    215c:	e9 5b       	subi	r30, 0xB9	; 185
    215e:	ff 4f       	sbci	r31, 0xFF	; 255
    2160:	80 81       	ld	r24, Z
    2162:	8d 33       	cpi	r24, 0x3D	; 61
    2164:	09 f0       	breq	.+2      	; 0x2168 <main+0x4f6>
    2166:	29 cf       	rjmp	.-430    	; 0x1fba <main+0x348>
    2168:	fe 01       	movw	r30, r28
    216a:	e8 5b       	subi	r30, 0xB8	; 184
    216c:	ff 4f       	sbci	r31, 0xFF	; 255
    216e:	80 81       	ld	r24, Z
    2170:	81 30       	cpi	r24, 0x01	; 1
    2172:	09 f0       	breq	.+2      	; 0x2176 <main+0x504>
    2174:	22 cf       	rjmp	.-444    	; 0x1fba <main+0x348>
			{
				LCD_vWriteData(61);
    2176:	8d e3       	ldi	r24, 0x3D	; 61
    2178:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <LCD_vWriteData>
    217c:	80 e0       	ldi	r24, 0x00	; 0
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	a1 ee       	ldi	r26, 0xE1	; 225
    2182:	b3 e4       	ldi	r27, 0x43	; 67
    2184:	89 8f       	std	Y+25, r24	; 0x19
    2186:	9a 8f       	std	Y+26, r25	; 0x1a
    2188:	ab 8f       	std	Y+27, r26	; 0x1b
    218a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    218c:	69 8d       	ldd	r22, Y+25	; 0x19
    218e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2190:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2192:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2194:	20 e0       	ldi	r18, 0x00	; 0
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	4a ef       	ldi	r20, 0xFA	; 250
    219a:	54 e4       	ldi	r21, 0x44	; 68
    219c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21a0:	dc 01       	movw	r26, r24
    21a2:	cb 01       	movw	r24, r22
    21a4:	8d 8b       	std	Y+21, r24	; 0x15
    21a6:	9e 8b       	std	Y+22, r25	; 0x16
    21a8:	af 8b       	std	Y+23, r26	; 0x17
    21aa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21ac:	6d 89       	ldd	r22, Y+21	; 0x15
    21ae:	7e 89       	ldd	r23, Y+22	; 0x16
    21b0:	8f 89       	ldd	r24, Y+23	; 0x17
    21b2:	98 8d       	ldd	r25, Y+24	; 0x18
    21b4:	20 e0       	ldi	r18, 0x00	; 0
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	40 e8       	ldi	r20, 0x80	; 128
    21ba:	5f e3       	ldi	r21, 0x3F	; 63
    21bc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    21c0:	88 23       	and	r24, r24
    21c2:	2c f4       	brge	.+10     	; 0x21ce <main+0x55c>
		__ticks = 1;
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	9c 8b       	std	Y+20, r25	; 0x14
    21ca:	8b 8b       	std	Y+19, r24	; 0x13
    21cc:	3f c0       	rjmp	.+126    	; 0x224c <main+0x5da>
	else if (__tmp > 65535)
    21ce:	6d 89       	ldd	r22, Y+21	; 0x15
    21d0:	7e 89       	ldd	r23, Y+22	; 0x16
    21d2:	8f 89       	ldd	r24, Y+23	; 0x17
    21d4:	98 8d       	ldd	r25, Y+24	; 0x18
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	3f ef       	ldi	r19, 0xFF	; 255
    21da:	4f e7       	ldi	r20, 0x7F	; 127
    21dc:	57 e4       	ldi	r21, 0x47	; 71
    21de:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    21e2:	18 16       	cp	r1, r24
    21e4:	4c f5       	brge	.+82     	; 0x2238 <main+0x5c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21e6:	69 8d       	ldd	r22, Y+25	; 0x19
    21e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21ee:	20 e0       	ldi	r18, 0x00	; 0
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	40 e2       	ldi	r20, 0x20	; 32
    21f4:	51 e4       	ldi	r21, 0x41	; 65
    21f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21fa:	dc 01       	movw	r26, r24
    21fc:	cb 01       	movw	r24, r22
    21fe:	bc 01       	movw	r22, r24
    2200:	cd 01       	movw	r24, r26
    2202:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2206:	dc 01       	movw	r26, r24
    2208:	cb 01       	movw	r24, r22
    220a:	9c 8b       	std	Y+20, r25	; 0x14
    220c:	8b 8b       	std	Y+19, r24	; 0x13
    220e:	0f c0       	rjmp	.+30     	; 0x222e <main+0x5bc>
    2210:	88 ec       	ldi	r24, 0xC8	; 200
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	9a 8b       	std	Y+18, r25	; 0x12
    2216:	89 8b       	std	Y+17, r24	; 0x11
    2218:	89 89       	ldd	r24, Y+17	; 0x11
    221a:	9a 89       	ldd	r25, Y+18	; 0x12
    221c:	01 97       	sbiw	r24, 0x01	; 1
    221e:	f1 f7       	brne	.-4      	; 0x221c <main+0x5aa>
    2220:	9a 8b       	std	Y+18, r25	; 0x12
    2222:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2224:	8b 89       	ldd	r24, Y+19	; 0x13
    2226:	9c 89       	ldd	r25, Y+20	; 0x14
    2228:	01 97       	sbiw	r24, 0x01	; 1
    222a:	9c 8b       	std	Y+20, r25	; 0x14
    222c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    222e:	8b 89       	ldd	r24, Y+19	; 0x13
    2230:	9c 89       	ldd	r25, Y+20	; 0x14
    2232:	00 97       	sbiw	r24, 0x00	; 0
    2234:	69 f7       	brne	.-38     	; 0x2210 <main+0x59e>
    2236:	14 c0       	rjmp	.+40     	; 0x2260 <main+0x5ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2238:	6d 89       	ldd	r22, Y+21	; 0x15
    223a:	7e 89       	ldd	r23, Y+22	; 0x16
    223c:	8f 89       	ldd	r24, Y+23	; 0x17
    223e:	98 8d       	ldd	r25, Y+24	; 0x18
    2240:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2244:	dc 01       	movw	r26, r24
    2246:	cb 01       	movw	r24, r22
    2248:	9c 8b       	std	Y+20, r25	; 0x14
    224a:	8b 8b       	std	Y+19, r24	; 0x13
    224c:	8b 89       	ldd	r24, Y+19	; 0x13
    224e:	9c 89       	ldd	r25, Y+20	; 0x14
    2250:	98 8b       	std	Y+16, r25	; 0x10
    2252:	8f 87       	std	Y+15, r24	; 0x0f
    2254:	8f 85       	ldd	r24, Y+15	; 0x0f
    2256:	98 89       	ldd	r25, Y+16	; 0x10
    2258:	01 97       	sbiw	r24, 0x01	; 1
    225a:	f1 f7       	brne	.-4      	; 0x2258 <main+0x5e6>
    225c:	98 8b       	std	Y+16, r25	; 0x10
    225e:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(450);
				value=65;
    2260:	fe 01       	movw	r30, r28
    2262:	e9 5b       	subi	r30, 0xB9	; 185
    2264:	ff 4f       	sbci	r31, 0xFF	; 255
    2266:	81 e4       	ldi	r24, 0x41	; 65
    2268:	80 83       	st	Z, r24
				break;
			}

		}

		switch (operation)
    226a:	fe 01       	movw	r30, r28
    226c:	e6 5b       	subi	r30, 0xB6	; 182
    226e:	ff 4f       	sbci	r31, 0xFF	; 255
    2270:	80 81       	ld	r24, Z
    2272:	e8 2f       	mov	r30, r24
    2274:	f0 e0       	ldi	r31, 0x00	; 0
    2276:	63 96       	adiw	r28, 0x13	; 19
    2278:	ff af       	std	Y+63, r31	; 0x3f
    227a:	ee af       	std	Y+62, r30	; 0x3e
    227c:	63 97       	sbiw	r28, 0x13	; 19
    227e:	63 96       	adiw	r28, 0x13	; 19
    2280:	2e ad       	ldd	r18, Y+62	; 0x3e
    2282:	3f ad       	ldd	r19, Y+63	; 0x3f
    2284:	63 97       	sbiw	r28, 0x13	; 19
    2286:	2b 32       	cpi	r18, 0x2B	; 43
    2288:	31 05       	cpc	r19, r1
    228a:	f1 f0       	breq	.+60     	; 0x22c8 <main+0x656>
    228c:	63 96       	adiw	r28, 0x13	; 19
    228e:	4e ad       	ldd	r20, Y+62	; 0x3e
    2290:	5f ad       	ldd	r21, Y+63	; 0x3f
    2292:	63 97       	sbiw	r28, 0x13	; 19
    2294:	4c 32       	cpi	r20, 0x2C	; 44
    2296:	51 05       	cpc	r21, r1
    2298:	44 f4       	brge	.+16     	; 0x22aa <main+0x638>
    229a:	63 96       	adiw	r28, 0x13	; 19
    229c:	8e ad       	ldd	r24, Y+62	; 0x3e
    229e:	9f ad       	ldd	r25, Y+63	; 0x3f
    22a0:	63 97       	sbiw	r28, 0x13	; 19
    22a2:	8a 32       	cpi	r24, 0x2A	; 42
    22a4:	91 05       	cpc	r25, r1
    22a6:	81 f1       	breq	.+96     	; 0x2308 <main+0x696>
    22a8:	fa cc       	rjmp	.-1548   	; 0x1c9e <main+0x2c>
    22aa:	63 96       	adiw	r28, 0x13	; 19
    22ac:	ee ad       	ldd	r30, Y+62	; 0x3e
    22ae:	ff ad       	ldd	r31, Y+63	; 0x3f
    22b0:	63 97       	sbiw	r28, 0x13	; 19
    22b2:	ed 32       	cpi	r30, 0x2D	; 45
    22b4:	f1 05       	cpc	r31, r1
    22b6:	b9 f0       	breq	.+46     	; 0x22e6 <main+0x674>
    22b8:	63 96       	adiw	r28, 0x13	; 19
    22ba:	2e ad       	ldd	r18, Y+62	; 0x3e
    22bc:	3f ad       	ldd	r19, Y+63	; 0x3f
    22be:	63 97       	sbiw	r28, 0x13	; 19
    22c0:	2f 32       	cpi	r18, 0x2F	; 47
    22c2:	31 05       	cpc	r19, r1
    22c4:	91 f1       	breq	.+100    	; 0x232a <main+0x6b8>
    22c6:	eb cc       	rjmp	.-1578   	; 0x1c9e <main+0x2c>
		{
		case 43:
			result_num=num1 + num2;
    22c8:	9e 01       	movw	r18, r28
    22ca:	27 5b       	subi	r18, 0xB7	; 183
    22cc:	3f 4f       	sbci	r19, 0xFF	; 255
    22ce:	fe 01       	movw	r30, r28
    22d0:	e4 5b       	subi	r30, 0xB4	; 180
    22d2:	ff 4f       	sbci	r31, 0xFF	; 255
    22d4:	de 01       	movw	r26, r28
    22d6:	a5 5b       	subi	r26, 0xB5	; 181
    22d8:	bf 4f       	sbci	r27, 0xFF	; 255
    22da:	90 81       	ld	r25, Z
    22dc:	8c 91       	ld	r24, X
    22de:	89 0f       	add	r24, r25
    22e0:	f9 01       	movw	r30, r18
    22e2:	80 83       	st	Z, r24
    22e4:	32 c0       	rjmp	.+100    	; 0x234a <main+0x6d8>
			break;
		case 45:
			result_num=num1 - num2;
    22e6:	9e 01       	movw	r18, r28
    22e8:	27 5b       	subi	r18, 0xB7	; 183
    22ea:	3f 4f       	sbci	r19, 0xFF	; 255
    22ec:	fe 01       	movw	r30, r28
    22ee:	e4 5b       	subi	r30, 0xB4	; 180
    22f0:	ff 4f       	sbci	r31, 0xFF	; 255
    22f2:	de 01       	movw	r26, r28
    22f4:	a5 5b       	subi	r26, 0xB5	; 181
    22f6:	bf 4f       	sbci	r27, 0xFF	; 255
    22f8:	90 81       	ld	r25, Z
    22fa:	8c 91       	ld	r24, X
    22fc:	f9 2f       	mov	r31, r25
    22fe:	f8 1b       	sub	r31, r24
    2300:	8f 2f       	mov	r24, r31
    2302:	f9 01       	movw	r30, r18
    2304:	80 83       	st	Z, r24
    2306:	21 c0       	rjmp	.+66     	; 0x234a <main+0x6d8>
			break;
		case 42:
			result_num=num1 * num2;
    2308:	9e 01       	movw	r18, r28
    230a:	27 5b       	subi	r18, 0xB7	; 183
    230c:	3f 4f       	sbci	r19, 0xFF	; 255
    230e:	fe 01       	movw	r30, r28
    2310:	e4 5b       	subi	r30, 0xB4	; 180
    2312:	ff 4f       	sbci	r31, 0xFF	; 255
    2314:	de 01       	movw	r26, r28
    2316:	a5 5b       	subi	r26, 0xB5	; 181
    2318:	bf 4f       	sbci	r27, 0xFF	; 255
    231a:	90 81       	ld	r25, Z
    231c:	8c 91       	ld	r24, X
    231e:	98 9f       	mul	r25, r24
    2320:	80 2d       	mov	r24, r0
    2322:	11 24       	eor	r1, r1
    2324:	f9 01       	movw	r30, r18
    2326:	80 83       	st	Z, r24
    2328:	10 c0       	rjmp	.+32     	; 0x234a <main+0x6d8>
			break;
		case 47:
			result_num=num1 / num2;
    232a:	9e 01       	movw	r18, r28
    232c:	27 5b       	subi	r18, 0xB7	; 183
    232e:	3f 4f       	sbci	r19, 0xFF	; 255
    2330:	fe 01       	movw	r30, r28
    2332:	e4 5b       	subi	r30, 0xB4	; 180
    2334:	ff 4f       	sbci	r31, 0xFF	; 255
    2336:	de 01       	movw	r26, r28
    2338:	a5 5b       	subi	r26, 0xB5	; 181
    233a:	bf 4f       	sbci	r27, 0xFF	; 255
    233c:	80 81       	ld	r24, Z
    233e:	9c 91       	ld	r25, X
    2340:	69 2f       	mov	r22, r25
    2342:	0e 94 30 12 	call	0x2460	; 0x2460 <__udivmodqi4>
    2346:	f9 01       	movw	r30, r18
    2348:	80 83       	st	Z, r24
			break;
		default :
			continue;
		}
		itoa(result_num, result, 10);
    234a:	fe 01       	movw	r30, r28
    234c:	e7 5b       	subi	r30, 0xB7	; 183
    234e:	ff 4f       	sbci	r31, 0xFF	; 255
    2350:	80 81       	ld	r24, Z
    2352:	88 2f       	mov	r24, r24
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	9e 01       	movw	r18, r28
    2358:	23 5b       	subi	r18, 0xB3	; 179
    235a:	3f 4f       	sbci	r19, 0xFF	; 255
    235c:	b9 01       	movw	r22, r18
    235e:	4a e0       	ldi	r20, 0x0A	; 10
    2360:	50 e0       	ldi	r21, 0x00	; 0
    2362:	0e 94 73 12 	call	0x24e6	; 0x24e6 <itoa>
		LCD_vPosition(29);
    2366:	8d e1       	ldi	r24, 0x1D	; 29
    2368:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <LCD_vPosition>
		LCD_vWriteDataString(result);
    236c:	ce 01       	movw	r24, r28
    236e:	83 5b       	subi	r24, 0xB3	; 179
    2370:	9f 4f       	sbci	r25, 0xFF	; 255
    2372:	0e 94 80 09 	call	0x1300	; 0x1300 <LCD_vWriteDataString>
    2376:	80 e0       	ldi	r24, 0x00	; 0
    2378:	90 e4       	ldi	r25, 0x40	; 64
    237a:	ac e9       	ldi	r26, 0x9C	; 156
    237c:	b5 e4       	ldi	r27, 0x45	; 69
    237e:	8b 87       	std	Y+11, r24	; 0x0b
    2380:	9c 87       	std	Y+12, r25	; 0x0c
    2382:	ad 87       	std	Y+13, r26	; 0x0d
    2384:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2386:	6b 85       	ldd	r22, Y+11	; 0x0b
    2388:	7c 85       	ldd	r23, Y+12	; 0x0c
    238a:	8d 85       	ldd	r24, Y+13	; 0x0d
    238c:	9e 85       	ldd	r25, Y+14	; 0x0e
    238e:	20 e0       	ldi	r18, 0x00	; 0
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	4a ef       	ldi	r20, 0xFA	; 250
    2394:	54 e4       	ldi	r21, 0x44	; 68
    2396:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    239a:	dc 01       	movw	r26, r24
    239c:	cb 01       	movw	r24, r22
    239e:	8f 83       	std	Y+7, r24	; 0x07
    23a0:	98 87       	std	Y+8, r25	; 0x08
    23a2:	a9 87       	std	Y+9, r26	; 0x09
    23a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23a6:	6f 81       	ldd	r22, Y+7	; 0x07
    23a8:	78 85       	ldd	r23, Y+8	; 0x08
    23aa:	89 85       	ldd	r24, Y+9	; 0x09
    23ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ae:	20 e0       	ldi	r18, 0x00	; 0
    23b0:	30 e0       	ldi	r19, 0x00	; 0
    23b2:	40 e8       	ldi	r20, 0x80	; 128
    23b4:	5f e3       	ldi	r21, 0x3F	; 63
    23b6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    23ba:	88 23       	and	r24, r24
    23bc:	2c f4       	brge	.+10     	; 0x23c8 <main+0x756>
		__ticks = 1;
    23be:	81 e0       	ldi	r24, 0x01	; 1
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	9e 83       	std	Y+6, r25	; 0x06
    23c4:	8d 83       	std	Y+5, r24	; 0x05
    23c6:	3f c0       	rjmp	.+126    	; 0x2446 <main+0x7d4>
	else if (__tmp > 65535)
    23c8:	6f 81       	ldd	r22, Y+7	; 0x07
    23ca:	78 85       	ldd	r23, Y+8	; 0x08
    23cc:	89 85       	ldd	r24, Y+9	; 0x09
    23ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    23d0:	20 e0       	ldi	r18, 0x00	; 0
    23d2:	3f ef       	ldi	r19, 0xFF	; 255
    23d4:	4f e7       	ldi	r20, 0x7F	; 127
    23d6:	57 e4       	ldi	r21, 0x47	; 71
    23d8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    23dc:	18 16       	cp	r1, r24
    23de:	4c f5       	brge	.+82     	; 0x2432 <main+0x7c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    23e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    23e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    23e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    23e8:	20 e0       	ldi	r18, 0x00	; 0
    23ea:	30 e0       	ldi	r19, 0x00	; 0
    23ec:	40 e2       	ldi	r20, 0x20	; 32
    23ee:	51 e4       	ldi	r21, 0x41	; 65
    23f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23f4:	dc 01       	movw	r26, r24
    23f6:	cb 01       	movw	r24, r22
    23f8:	bc 01       	movw	r22, r24
    23fa:	cd 01       	movw	r24, r26
    23fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2400:	dc 01       	movw	r26, r24
    2402:	cb 01       	movw	r24, r22
    2404:	9e 83       	std	Y+6, r25	; 0x06
    2406:	8d 83       	std	Y+5, r24	; 0x05
    2408:	0f c0       	rjmp	.+30     	; 0x2428 <main+0x7b6>
    240a:	88 ec       	ldi	r24, 0xC8	; 200
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	9c 83       	std	Y+4, r25	; 0x04
    2410:	8b 83       	std	Y+3, r24	; 0x03
    2412:	8b 81       	ldd	r24, Y+3	; 0x03
    2414:	9c 81       	ldd	r25, Y+4	; 0x04
    2416:	01 97       	sbiw	r24, 0x01	; 1
    2418:	f1 f7       	brne	.-4      	; 0x2416 <main+0x7a4>
    241a:	9c 83       	std	Y+4, r25	; 0x04
    241c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    241e:	8d 81       	ldd	r24, Y+5	; 0x05
    2420:	9e 81       	ldd	r25, Y+6	; 0x06
    2422:	01 97       	sbiw	r24, 0x01	; 1
    2424:	9e 83       	std	Y+6, r25	; 0x06
    2426:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2428:	8d 81       	ldd	r24, Y+5	; 0x05
    242a:	9e 81       	ldd	r25, Y+6	; 0x06
    242c:	00 97       	sbiw	r24, 0x00	; 0
    242e:	69 f7       	brne	.-38     	; 0x240a <main+0x798>
    2430:	14 c0       	rjmp	.+40     	; 0x245a <main+0x7e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2432:	6f 81       	ldd	r22, Y+7	; 0x07
    2434:	78 85       	ldd	r23, Y+8	; 0x08
    2436:	89 85       	ldd	r24, Y+9	; 0x09
    2438:	9a 85       	ldd	r25, Y+10	; 0x0a
    243a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    243e:	dc 01       	movw	r26, r24
    2440:	cb 01       	movw	r24, r22
    2442:	9e 83       	std	Y+6, r25	; 0x06
    2444:	8d 83       	std	Y+5, r24	; 0x05
    2446:	8d 81       	ldd	r24, Y+5	; 0x05
    2448:	9e 81       	ldd	r25, Y+6	; 0x06
    244a:	9a 83       	std	Y+2, r25	; 0x02
    244c:	89 83       	std	Y+1, r24	; 0x01
    244e:	89 81       	ldd	r24, Y+1	; 0x01
    2450:	9a 81       	ldd	r25, Y+2	; 0x02
    2452:	01 97       	sbiw	r24, 0x01	; 1
    2454:	f1 f7       	brne	.-4      	; 0x2452 <main+0x7e0>
    2456:	9a 83       	std	Y+2, r25	; 0x02
    2458:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(5000);


		LCD_vClear();
    245a:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <LCD_vClear>
    245e:	1f cc       	rjmp	.-1986   	; 0x1c9e <main+0x2c>

00002460 <__udivmodqi4>:
    2460:	99 1b       	sub	r25, r25
    2462:	79 e0       	ldi	r23, 0x09	; 9
    2464:	04 c0       	rjmp	.+8      	; 0x246e <__udivmodqi4_ep>

00002466 <__udivmodqi4_loop>:
    2466:	99 1f       	adc	r25, r25
    2468:	96 17       	cp	r25, r22
    246a:	08 f0       	brcs	.+2      	; 0x246e <__udivmodqi4_ep>
    246c:	96 1b       	sub	r25, r22

0000246e <__udivmodqi4_ep>:
    246e:	88 1f       	adc	r24, r24
    2470:	7a 95       	dec	r23
    2472:	c9 f7       	brne	.-14     	; 0x2466 <__udivmodqi4_loop>
    2474:	80 95       	com	r24
    2476:	08 95       	ret

00002478 <__prologue_saves__>:
    2478:	2f 92       	push	r2
    247a:	3f 92       	push	r3
    247c:	4f 92       	push	r4
    247e:	5f 92       	push	r5
    2480:	6f 92       	push	r6
    2482:	7f 92       	push	r7
    2484:	8f 92       	push	r8
    2486:	9f 92       	push	r9
    2488:	af 92       	push	r10
    248a:	bf 92       	push	r11
    248c:	cf 92       	push	r12
    248e:	df 92       	push	r13
    2490:	ef 92       	push	r14
    2492:	ff 92       	push	r15
    2494:	0f 93       	push	r16
    2496:	1f 93       	push	r17
    2498:	cf 93       	push	r28
    249a:	df 93       	push	r29
    249c:	cd b7       	in	r28, 0x3d	; 61
    249e:	de b7       	in	r29, 0x3e	; 62
    24a0:	ca 1b       	sub	r28, r26
    24a2:	db 0b       	sbc	r29, r27
    24a4:	0f b6       	in	r0, 0x3f	; 63
    24a6:	f8 94       	cli
    24a8:	de bf       	out	0x3e, r29	; 62
    24aa:	0f be       	out	0x3f, r0	; 63
    24ac:	cd bf       	out	0x3d, r28	; 61
    24ae:	09 94       	ijmp

000024b0 <__epilogue_restores__>:
    24b0:	2a 88       	ldd	r2, Y+18	; 0x12
    24b2:	39 88       	ldd	r3, Y+17	; 0x11
    24b4:	48 88       	ldd	r4, Y+16	; 0x10
    24b6:	5f 84       	ldd	r5, Y+15	; 0x0f
    24b8:	6e 84       	ldd	r6, Y+14	; 0x0e
    24ba:	7d 84       	ldd	r7, Y+13	; 0x0d
    24bc:	8c 84       	ldd	r8, Y+12	; 0x0c
    24be:	9b 84       	ldd	r9, Y+11	; 0x0b
    24c0:	aa 84       	ldd	r10, Y+10	; 0x0a
    24c2:	b9 84       	ldd	r11, Y+9	; 0x09
    24c4:	c8 84       	ldd	r12, Y+8	; 0x08
    24c6:	df 80       	ldd	r13, Y+7	; 0x07
    24c8:	ee 80       	ldd	r14, Y+6	; 0x06
    24ca:	fd 80       	ldd	r15, Y+5	; 0x05
    24cc:	0c 81       	ldd	r16, Y+4	; 0x04
    24ce:	1b 81       	ldd	r17, Y+3	; 0x03
    24d0:	aa 81       	ldd	r26, Y+2	; 0x02
    24d2:	b9 81       	ldd	r27, Y+1	; 0x01
    24d4:	ce 0f       	add	r28, r30
    24d6:	d1 1d       	adc	r29, r1
    24d8:	0f b6       	in	r0, 0x3f	; 63
    24da:	f8 94       	cli
    24dc:	de bf       	out	0x3e, r29	; 62
    24de:	0f be       	out	0x3f, r0	; 63
    24e0:	cd bf       	out	0x3d, r28	; 61
    24e2:	ed 01       	movw	r28, r26
    24e4:	08 95       	ret

000024e6 <itoa>:
    24e6:	fb 01       	movw	r30, r22
    24e8:	9f 01       	movw	r18, r30
    24ea:	e8 94       	clt
    24ec:	42 30       	cpi	r20, 0x02	; 2
    24ee:	c4 f0       	brlt	.+48     	; 0x2520 <itoa+0x3a>
    24f0:	45 32       	cpi	r20, 0x25	; 37
    24f2:	b4 f4       	brge	.+44     	; 0x2520 <itoa+0x3a>
    24f4:	4a 30       	cpi	r20, 0x0A	; 10
    24f6:	29 f4       	brne	.+10     	; 0x2502 <itoa+0x1c>
    24f8:	97 fb       	bst	r25, 7
    24fa:	1e f4       	brtc	.+6      	; 0x2502 <itoa+0x1c>
    24fc:	90 95       	com	r25
    24fe:	81 95       	neg	r24
    2500:	9f 4f       	sbci	r25, 0xFF	; 255
    2502:	64 2f       	mov	r22, r20
    2504:	77 27       	eor	r23, r23
    2506:	0e 94 a4 12 	call	0x2548	; 0x2548 <__udivmodhi4>
    250a:	80 5d       	subi	r24, 0xD0	; 208
    250c:	8a 33       	cpi	r24, 0x3A	; 58
    250e:	0c f0       	brlt	.+2      	; 0x2512 <itoa+0x2c>
    2510:	89 5d       	subi	r24, 0xD9	; 217
    2512:	81 93       	st	Z+, r24
    2514:	cb 01       	movw	r24, r22
    2516:	00 97       	sbiw	r24, 0x00	; 0
    2518:	a1 f7       	brne	.-24     	; 0x2502 <itoa+0x1c>
    251a:	16 f4       	brtc	.+4      	; 0x2520 <itoa+0x3a>
    251c:	5d e2       	ldi	r21, 0x2D	; 45
    251e:	51 93       	st	Z+, r21
    2520:	10 82       	st	Z, r1
    2522:	c9 01       	movw	r24, r18
    2524:	0c 94 94 12 	jmp	0x2528	; 0x2528 <strrev>

00002528 <strrev>:
    2528:	dc 01       	movw	r26, r24
    252a:	fc 01       	movw	r30, r24
    252c:	67 2f       	mov	r22, r23
    252e:	71 91       	ld	r23, Z+
    2530:	77 23       	and	r23, r23
    2532:	e1 f7       	brne	.-8      	; 0x252c <strrev+0x4>
    2534:	32 97       	sbiw	r30, 0x02	; 2
    2536:	04 c0       	rjmp	.+8      	; 0x2540 <strrev+0x18>
    2538:	7c 91       	ld	r23, X
    253a:	6d 93       	st	X+, r22
    253c:	70 83       	st	Z, r23
    253e:	62 91       	ld	r22, -Z
    2540:	ae 17       	cp	r26, r30
    2542:	bf 07       	cpc	r27, r31
    2544:	c8 f3       	brcs	.-14     	; 0x2538 <strrev+0x10>
    2546:	08 95       	ret

00002548 <__udivmodhi4>:
    2548:	aa 1b       	sub	r26, r26
    254a:	bb 1b       	sub	r27, r27
    254c:	51 e1       	ldi	r21, 0x11	; 17
    254e:	07 c0       	rjmp	.+14     	; 0x255e <__udivmodhi4_ep>

00002550 <__udivmodhi4_loop>:
    2550:	aa 1f       	adc	r26, r26
    2552:	bb 1f       	adc	r27, r27
    2554:	a6 17       	cp	r26, r22
    2556:	b7 07       	cpc	r27, r23
    2558:	10 f0       	brcs	.+4      	; 0x255e <__udivmodhi4_ep>
    255a:	a6 1b       	sub	r26, r22
    255c:	b7 0b       	sbc	r27, r23

0000255e <__udivmodhi4_ep>:
    255e:	88 1f       	adc	r24, r24
    2560:	99 1f       	adc	r25, r25
    2562:	5a 95       	dec	r21
    2564:	a9 f7       	brne	.-22     	; 0x2550 <__udivmodhi4_loop>
    2566:	80 95       	com	r24
    2568:	90 95       	com	r25
    256a:	bc 01       	movw	r22, r24
    256c:	cd 01       	movw	r24, r26
    256e:	08 95       	ret

00002570 <_exit>:
    2570:	f8 94       	cli

00002572 <__stop_program>:
    2572:	ff cf       	rjmp	.-2      	; 0x2572 <__stop_program>
